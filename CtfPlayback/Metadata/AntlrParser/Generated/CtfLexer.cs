//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Ctf.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class CtfLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		ALIGN=18, CALLSITE=19, CLOCK=20, ENUM=21, ENV=22, EVENT=23, FLOATING_POINT=24, 
		INTEGER=25, STREAM=26, STRING=27, STRUCT=28, TRACE=29, TYPEALIAS=30, TYPEDEF=31, 
		VARIANT=32, DECIMAL_LITERAL=33, OCTAL_LITERAL=34, HEXADECIMAL_LITERAL=35, 
		IDENTIFIER=36, COMMENT=37, WS=38, LINE_COMMENT=39, STRING_LITERAL=40, 
		CHARACTER_LITERAL=41, GARBAGE=42;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"ALIGN", "CALLSITE", "CLOCK", "ENUM", "ENV", "EVENT", "FLOATING_POINT", 
		"INTEGER", "STREAM", "STRING", "STRUCT", "TRACE", "TYPEALIAS", "TYPEDEF", 
		"VARIANT", "DECIMAL_LITERAL", "OCTAL_LITERAL", "HEXADECIMAL_LITERAL", 
		"IDENTIFIER", "COMMENT", "WS", "LINE_COMMENT", "STRING_LITERAL", "CHARACTER_LITERAL", 
		"GARBAGE", "EscapeSequence", "OctalEscape", "UnicodeEscape", "IntegerSuffix", 
		"HexadecimalDigit", "NonDigit", "HexQuad", "UcharLowercase", "UcharUppercase", 
		"IdNonDigit"
	};


	public CtfLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CtfLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "':='", "'{'", "'}'", "','", "'.'", "':'", "'<'", "'>'", 
		"'('", "')'", "'['", "']'", "'='", "'+'", "'-'", "'...'", "'align'", "'callsite'", 
		"'clock'", "'enum'", "'env'", "'event'", "'floating_point'", "'integer'", 
		"'stream'", "'string'", "'struct'", "'trace'", "'typealias'", "'typedef'", 
		"'variant'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "ALIGN", "CALLSITE", "CLOCK", "ENUM", 
		"ENV", "EVENT", "FLOATING_POINT", "INTEGER", "STREAM", "STRING", "STRUCT", 
		"TRACE", "TYPEALIAS", "TYPEDEF", "VARIANT", "DECIMAL_LITERAL", "OCTAL_LITERAL", 
		"HEXADECIMAL_LITERAL", "IDENTIFIER", "COMMENT", "WS", "LINE_COMMENT", 
		"STRING_LITERAL", "CHARACTER_LITERAL", "GARBAGE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ctf.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CtfLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,42,443,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
		5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,
		13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,
		17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,
		19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,
		22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,
		25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,
		27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,
		29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,
		30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,5,32,258,
		8,32,10,32,12,32,261,9,32,3,32,263,8,32,1,32,3,32,266,8,32,1,33,1,33,4,
		33,270,8,33,11,33,12,33,271,1,33,3,33,275,8,33,1,34,1,34,1,34,4,34,280,
		8,34,11,34,12,34,281,1,34,3,34,285,8,34,1,35,1,35,1,35,5,35,290,8,35,10,
		35,12,35,293,9,35,1,36,1,36,1,36,1,36,5,36,299,8,36,10,36,12,36,302,9,
		36,1,36,1,36,1,36,1,36,1,36,1,37,4,37,310,8,37,11,37,12,37,311,1,37,1,
		37,1,38,1,38,1,38,1,38,5,38,320,8,38,10,38,12,38,323,9,38,1,38,3,38,326,
		8,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,5,39,335,8,39,10,39,12,39,338,
		9,39,1,39,1,39,1,40,1,40,1,40,3,40,345,8,40,1,40,1,40,1,41,1,41,1,41,1,
		41,1,42,1,42,1,42,1,42,3,42,357,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
		1,43,1,43,3,43,368,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,
		45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
		45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
		45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,419,8,45,
		1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,50,
		1,50,1,50,1,50,1,50,1,51,1,51,1,51,3,51,442,8,51,1,300,0,52,1,1,3,2,5,
		3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
		33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
		57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
		81,41,83,42,85,0,87,0,89,0,91,0,93,0,95,0,97,0,99,0,101,0,103,0,1,0,10,
		1,0,49,57,1,0,48,57,2,0,88,88,120,120,3,0,9,10,12,13,32,32,2,0,10,10,13,
		13,2,0,34,34,92,92,2,0,39,39,92,92,8,0,34,34,39,39,92,92,98,98,102,102,
		110,110,114,114,116,116,3,0,48,57,65,70,97,102,3,0,65,90,95,95,97,122,
		471,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
		0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
		0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
		0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
		1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
		0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
		1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,1,105,1,0,0,0,3,107,1,0,
		0,0,5,110,1,0,0,0,7,112,1,0,0,0,9,114,1,0,0,0,11,116,1,0,0,0,13,118,1,
		0,0,0,15,120,1,0,0,0,17,122,1,0,0,0,19,124,1,0,0,0,21,126,1,0,0,0,23,128,
		1,0,0,0,25,130,1,0,0,0,27,132,1,0,0,0,29,134,1,0,0,0,31,136,1,0,0,0,33,
		138,1,0,0,0,35,142,1,0,0,0,37,148,1,0,0,0,39,157,1,0,0,0,41,163,1,0,0,
		0,43,168,1,0,0,0,45,172,1,0,0,0,47,178,1,0,0,0,49,193,1,0,0,0,51,201,1,
		0,0,0,53,208,1,0,0,0,55,215,1,0,0,0,57,222,1,0,0,0,59,228,1,0,0,0,61,238,
		1,0,0,0,63,246,1,0,0,0,65,262,1,0,0,0,67,267,1,0,0,0,69,276,1,0,0,0,71,
		286,1,0,0,0,73,294,1,0,0,0,75,309,1,0,0,0,77,315,1,0,0,0,79,331,1,0,0,
		0,81,341,1,0,0,0,83,348,1,0,0,0,85,356,1,0,0,0,87,367,1,0,0,0,89,369,1,
		0,0,0,91,418,1,0,0,0,93,420,1,0,0,0,95,422,1,0,0,0,97,424,1,0,0,0,99,429,
		1,0,0,0,101,433,1,0,0,0,103,441,1,0,0,0,105,106,5,59,0,0,106,2,1,0,0,0,
		107,108,5,58,0,0,108,109,5,61,0,0,109,4,1,0,0,0,110,111,5,123,0,0,111,
		6,1,0,0,0,112,113,5,125,0,0,113,8,1,0,0,0,114,115,5,44,0,0,115,10,1,0,
		0,0,116,117,5,46,0,0,117,12,1,0,0,0,118,119,5,58,0,0,119,14,1,0,0,0,120,
		121,5,60,0,0,121,16,1,0,0,0,122,123,5,62,0,0,123,18,1,0,0,0,124,125,5,
		40,0,0,125,20,1,0,0,0,126,127,5,41,0,0,127,22,1,0,0,0,128,129,5,91,0,0,
		129,24,1,0,0,0,130,131,5,93,0,0,131,26,1,0,0,0,132,133,5,61,0,0,133,28,
		1,0,0,0,134,135,5,43,0,0,135,30,1,0,0,0,136,137,5,45,0,0,137,32,1,0,0,
		0,138,139,5,46,0,0,139,140,5,46,0,0,140,141,5,46,0,0,141,34,1,0,0,0,142,
		143,5,97,0,0,143,144,5,108,0,0,144,145,5,105,0,0,145,146,5,103,0,0,146,
		147,5,110,0,0,147,36,1,0,0,0,148,149,5,99,0,0,149,150,5,97,0,0,150,151,
		5,108,0,0,151,152,5,108,0,0,152,153,5,115,0,0,153,154,5,105,0,0,154,155,
		5,116,0,0,155,156,5,101,0,0,156,38,1,0,0,0,157,158,5,99,0,0,158,159,5,
		108,0,0,159,160,5,111,0,0,160,161,5,99,0,0,161,162,5,107,0,0,162,40,1,
		0,0,0,163,164,5,101,0,0,164,165,5,110,0,0,165,166,5,117,0,0,166,167,5,
		109,0,0,167,42,1,0,0,0,168,169,5,101,0,0,169,170,5,110,0,0,170,171,5,118,
		0,0,171,44,1,0,0,0,172,173,5,101,0,0,173,174,5,118,0,0,174,175,5,101,0,
		0,175,176,5,110,0,0,176,177,5,116,0,0,177,46,1,0,0,0,178,179,5,102,0,0,
		179,180,5,108,0,0,180,181,5,111,0,0,181,182,5,97,0,0,182,183,5,116,0,0,
		183,184,5,105,0,0,184,185,5,110,0,0,185,186,5,103,0,0,186,187,5,95,0,0,
		187,188,5,112,0,0,188,189,5,111,0,0,189,190,5,105,0,0,190,191,5,110,0,
		0,191,192,5,116,0,0,192,48,1,0,0,0,193,194,5,105,0,0,194,195,5,110,0,0,
		195,196,5,116,0,0,196,197,5,101,0,0,197,198,5,103,0,0,198,199,5,101,0,
		0,199,200,5,114,0,0,200,50,1,0,0,0,201,202,5,115,0,0,202,203,5,116,0,0,
		203,204,5,114,0,0,204,205,5,101,0,0,205,206,5,97,0,0,206,207,5,109,0,0,
		207,52,1,0,0,0,208,209,5,115,0,0,209,210,5,116,0,0,210,211,5,114,0,0,211,
		212,5,105,0,0,212,213,5,110,0,0,213,214,5,103,0,0,214,54,1,0,0,0,215,216,
		5,115,0,0,216,217,5,116,0,0,217,218,5,114,0,0,218,219,5,117,0,0,219,220,
		5,99,0,0,220,221,5,116,0,0,221,56,1,0,0,0,222,223,5,116,0,0,223,224,5,
		114,0,0,224,225,5,97,0,0,225,226,5,99,0,0,226,227,5,101,0,0,227,58,1,0,
		0,0,228,229,5,116,0,0,229,230,5,121,0,0,230,231,5,112,0,0,231,232,5,101,
		0,0,232,233,5,97,0,0,233,234,5,108,0,0,234,235,5,105,0,0,235,236,5,97,
		0,0,236,237,5,115,0,0,237,60,1,0,0,0,238,239,5,116,0,0,239,240,5,121,0,
		0,240,241,5,112,0,0,241,242,5,101,0,0,242,243,5,100,0,0,243,244,5,101,
		0,0,244,245,5,102,0,0,245,62,1,0,0,0,246,247,5,118,0,0,247,248,5,97,0,
		0,248,249,5,114,0,0,249,250,5,105,0,0,250,251,5,97,0,0,251,252,5,110,0,
		0,252,253,5,116,0,0,253,64,1,0,0,0,254,263,5,48,0,0,255,259,7,0,0,0,256,
		258,7,1,0,0,257,256,1,0,0,0,258,261,1,0,0,0,259,257,1,0,0,0,259,260,1,
		0,0,0,260,263,1,0,0,0,261,259,1,0,0,0,262,254,1,0,0,0,262,255,1,0,0,0,
		263,265,1,0,0,0,264,266,3,91,45,0,265,264,1,0,0,0,265,266,1,0,0,0,266,
		66,1,0,0,0,267,269,5,48,0,0,268,270,2,48,55,0,269,268,1,0,0,0,270,271,
		1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,0,272,274,1,0,0,0,273,275,3,91,45,
		0,274,273,1,0,0,0,274,275,1,0,0,0,275,68,1,0,0,0,276,277,5,48,0,0,277,
		279,7,2,0,0,278,280,3,93,46,0,279,278,1,0,0,0,280,281,1,0,0,0,281,279,
		1,0,0,0,281,282,1,0,0,0,282,284,1,0,0,0,283,285,3,91,45,0,284,283,1,0,
		0,0,284,285,1,0,0,0,285,70,1,0,0,0,286,291,3,103,51,0,287,290,3,103,51,
		0,288,290,2,48,57,0,289,287,1,0,0,0,289,288,1,0,0,0,290,293,1,0,0,0,291,
		289,1,0,0,0,291,292,1,0,0,0,292,72,1,0,0,0,293,291,1,0,0,0,294,295,5,47,
		0,0,295,296,5,42,0,0,296,300,1,0,0,0,297,299,9,0,0,0,298,297,1,0,0,0,299,
		302,1,0,0,0,300,301,1,0,0,0,300,298,1,0,0,0,301,303,1,0,0,0,302,300,1,
		0,0,0,303,304,5,42,0,0,304,305,5,47,0,0,305,306,1,0,0,0,306,307,6,36,0,
		0,307,74,1,0,0,0,308,310,7,3,0,0,309,308,1,0,0,0,310,311,1,0,0,0,311,309,
		1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,314,6,37,0,0,314,76,1,0,0,
		0,315,316,5,47,0,0,316,317,5,47,0,0,317,321,1,0,0,0,318,320,8,4,0,0,319,
		318,1,0,0,0,320,323,1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,325,1,
		0,0,0,323,321,1,0,0,0,324,326,5,13,0,0,325,324,1,0,0,0,325,326,1,0,0,0,
		326,327,1,0,0,0,327,328,5,10,0,0,328,329,1,0,0,0,329,330,6,38,0,0,330,
		78,1,0,0,0,331,336,5,34,0,0,332,335,3,85,42,0,333,335,8,5,0,0,334,332,
		1,0,0,0,334,333,1,0,0,0,335,338,1,0,0,0,336,334,1,0,0,0,336,337,1,0,0,
		0,337,339,1,0,0,0,338,336,1,0,0,0,339,340,5,34,0,0,340,80,1,0,0,0,341,
		344,5,39,0,0,342,345,3,85,42,0,343,345,8,6,0,0,344,342,1,0,0,0,344,343,
		1,0,0,0,345,346,1,0,0,0,346,347,5,39,0,0,347,82,1,0,0,0,348,349,9,0,0,
		0,349,350,1,0,0,0,350,351,6,41,1,0,351,84,1,0,0,0,352,353,5,92,0,0,353,
		357,7,7,0,0,354,357,3,89,44,0,355,357,3,87,43,0,356,352,1,0,0,0,356,354,
		1,0,0,0,356,355,1,0,0,0,357,86,1,0,0,0,358,359,5,92,0,0,359,360,2,48,51,
		0,360,361,2,48,55,0,361,368,2,48,55,0,362,363,5,92,0,0,363,364,2,48,55,
		0,364,368,2,48,55,0,365,366,5,92,0,0,366,368,2,48,55,0,367,358,1,0,0,0,
		367,362,1,0,0,0,367,365,1,0,0,0,368,88,1,0,0,0,369,370,5,92,0,0,370,371,
		5,117,0,0,371,372,3,93,46,0,372,373,3,93,46,0,373,374,3,93,46,0,374,375,
		3,93,46,0,375,90,1,0,0,0,376,419,5,85,0,0,377,378,5,85,0,0,378,419,5,76,
		0,0,379,380,5,85,0,0,380,381,5,76,0,0,381,419,5,76,0,0,382,383,5,76,0,
		0,383,419,5,85,0,0,384,385,5,76,0,0,385,386,5,76,0,0,386,419,5,85,0,0,
		387,388,5,85,0,0,388,419,5,108,0,0,389,390,5,85,0,0,390,391,5,108,0,0,
		391,419,5,108,0,0,392,393,5,108,0,0,393,419,5,85,0,0,394,395,5,108,0,0,
		395,396,5,108,0,0,396,419,5,85,0,0,397,419,5,117,0,0,398,399,5,117,0,0,
		399,419,5,76,0,0,400,401,5,117,0,0,401,402,5,76,0,0,402,419,5,76,0,0,403,
		404,5,76,0,0,404,419,5,117,0,0,405,406,5,76,0,0,406,407,5,76,0,0,407,419,
		5,117,0,0,408,409,5,117,0,0,409,419,5,108,0,0,410,411,5,117,0,0,411,412,
		5,108,0,0,412,419,5,108,0,0,413,414,5,108,0,0,414,419,5,117,0,0,415,416,
		5,108,0,0,416,417,5,108,0,0,417,419,5,117,0,0,418,376,1,0,0,0,418,377,
		1,0,0,0,418,379,1,0,0,0,418,382,1,0,0,0,418,384,1,0,0,0,418,387,1,0,0,
		0,418,389,1,0,0,0,418,392,1,0,0,0,418,394,1,0,0,0,418,397,1,0,0,0,418,
		398,1,0,0,0,418,400,1,0,0,0,418,403,1,0,0,0,418,405,1,0,0,0,418,408,1,
		0,0,0,418,410,1,0,0,0,418,413,1,0,0,0,418,415,1,0,0,0,419,92,1,0,0,0,420,
		421,7,8,0,0,421,94,1,0,0,0,422,423,7,9,0,0,423,96,1,0,0,0,424,425,3,93,
		46,0,425,426,3,93,46,0,426,427,3,93,46,0,427,428,3,93,46,0,428,98,1,0,
		0,0,429,430,5,92,0,0,430,431,5,117,0,0,431,432,3,97,48,0,432,100,1,0,0,
		0,433,434,5,92,0,0,434,435,5,85,0,0,435,436,3,97,48,0,436,437,3,97,48,
		0,437,102,1,0,0,0,438,442,3,95,47,0,439,442,3,99,49,0,440,442,3,101,50,
		0,441,438,1,0,0,0,441,439,1,0,0,0,441,440,1,0,0,0,442,104,1,0,0,0,21,0,
		259,262,265,271,274,281,284,289,291,300,311,321,325,334,336,344,356,367,
		418,441,2,0,1,0,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
