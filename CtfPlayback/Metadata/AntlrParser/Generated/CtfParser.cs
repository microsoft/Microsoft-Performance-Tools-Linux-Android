//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Ctf.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class CtfParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		ALIGN=18, CALLSITE=19, CLOCK=20, ENUM=21, ENV=22, EVENT=23, FLOATING_POINT=24, 
		INTEGER=25, STREAM=26, STRING=27, STRUCT=28, TRACE=29, TYPEALIAS=30, TYPEDEF=31, 
		VARIANT=32, DECIMAL_LITERAL=33, OCTAL_LITERAL=34, HEXADECIMAL_LITERAL=35, 
		IDENTIFIER=36, COMMENT=37, WS=38, LINE_COMMENT=39, STRING_LITERAL=40, 
		CHARACTER_LITERAL=41, GARBAGE=42;
	public const int
		RULE_file = 0, RULE_keywords = 1, RULE_declaration = 2, RULE_declared_type = 3, 
		RULE_typealias_declaration = 4, RULE_typedef_declaration = 5, RULE_declaration_specifiers = 6, 
		RULE_type_specifier = 7, RULE_event_declaration = 8, RULE_stream_declaration = 9, 
		RULE_env_declaration = 10, RULE_trace_declaration = 11, RULE_clock_declaration = 12, 
		RULE_callsite_declaration = 13, RULE_type_declarator_list = 14, RULE_abstract_declarator_list = 15, 
		RULE_alias_declaration_specifiers = 16, RULE_alias_abstract_declarator_list = 17, 
		RULE_dynamic_scope_type_assignment = 18, RULE_trace_assignment_expression_list = 19, 
		RULE_stream_assignment_expression_list = 20, RULE_ctf_expression = 21, 
		RULE_ctf_expression_list = 22, RULE_enum_type_specifier = 23, RULE_variant_type_specifier = 24, 
		RULE_struct_type_specifier = 25, RULE_event_declaration_begin = 26, RULE_event_declaration_end = 27, 
		RULE_stream_declaration_begin = 28, RULE_stream_declaration_end = 29, 
		RULE_env_declaration_begin = 30, RULE_env_declaration_end = 31, RULE_trace_declaration_begin = 32, 
		RULE_trace_declaration_end = 33, RULE_clock_declaration_begin = 34, RULE_clock_declaration_end = 35, 
		RULE_callsite_declaration_begin = 36, RULE_callsite_declaration_end = 37, 
		RULE_type_declarator = 38, RULE_abstract_declarator = 39, RULE_alias_abstract_declarator = 40, 
		RULE_ctf_assignment_expression = 41, RULE_enumerator_list = 42, RULE_enum_integer_declaration_specifiers = 43, 
		RULE_variant_declaration_begin = 44, RULE_variant_declaration_end = 45, 
		RULE_struct_or_variant_declaration_list = 46, RULE_struct_declaration_begin = 47, 
		RULE_struct_declaration_end = 48, RULE_unary_expression = 49, RULE_enumerator = 50, 
		RULE_enum_integer_type_specifier = 51, RULE_struct_or_variant_declaration = 52, 
		RULE_integerLiteral = 53, RULE_postfix_expression = 54, RULE_postfix_expression_complex = 55, 
		RULE_dynamic_reference = 56, RULE_enumerator_mapping = 57, RULE_struct_or_variant_declarator_list = 58, 
		RULE_struct_or_variant_declarator = 59, RULE_declarator = 60;
	public static readonly string[] ruleNames = {
		"file", "keywords", "declaration", "declared_type", "typealias_declaration", 
		"typedef_declaration", "declaration_specifiers", "type_specifier", "event_declaration", 
		"stream_declaration", "env_declaration", "trace_declaration", "clock_declaration", 
		"callsite_declaration", "type_declarator_list", "abstract_declarator_list", 
		"alias_declaration_specifiers", "alias_abstract_declarator_list", "dynamic_scope_type_assignment", 
		"trace_assignment_expression_list", "stream_assignment_expression_list", 
		"ctf_expression", "ctf_expression_list", "enum_type_specifier", "variant_type_specifier", 
		"struct_type_specifier", "event_declaration_begin", "event_declaration_end", 
		"stream_declaration_begin", "stream_declaration_end", "env_declaration_begin", 
		"env_declaration_end", "trace_declaration_begin", "trace_declaration_end", 
		"clock_declaration_begin", "clock_declaration_end", "callsite_declaration_begin", 
		"callsite_declaration_end", "type_declarator", "abstract_declarator", 
		"alias_abstract_declarator", "ctf_assignment_expression", "enumerator_list", 
		"enum_integer_declaration_specifiers", "variant_declaration_begin", "variant_declaration_end", 
		"struct_or_variant_declaration_list", "struct_declaration_begin", "struct_declaration_end", 
		"unary_expression", "enumerator", "enum_integer_type_specifier", "struct_or_variant_declaration", 
		"integerLiteral", "postfix_expression", "postfix_expression_complex", 
		"dynamic_reference", "enumerator_mapping", "struct_or_variant_declarator_list", 
		"struct_or_variant_declarator", "declarator"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "':='", "'{'", "'}'", "','", "'.'", "':'", "'<'", "'>'", 
		"'('", "')'", "'['", "']'", "'='", "'+'", "'-'", "'...'", "'align'", "'callsite'", 
		"'clock'", "'enum'", "'env'", "'event'", "'floating_point'", "'integer'", 
		"'stream'", "'string'", "'struct'", "'trace'", "'typealias'", "'typedef'", 
		"'variant'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "ALIGN", "CALLSITE", "CLOCK", "ENUM", 
		"ENV", "EVENT", "FLOATING_POINT", "INTEGER", "STREAM", "STRING", "STRUCT", 
		"TRACE", "TYPEALIAS", "TYPEDEF", "VARIANT", "DECIMAL_LITERAL", "OCTAL_LITERAL", 
		"HEXADECIMAL_LITERAL", "IDENTIFIER", "COMMENT", "WS", "LINE_COMMENT", 
		"STRING_LITERAL", "CHARACTER_LITERAL", "GARBAGE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ctf.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CtfParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CtfParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CtfParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 122;
				declaration();
				}
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 77308887040L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATING_POINT() { return GetToken(CtfParser.FLOATING_POINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(CtfParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CtfParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(CtfParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANT() { return GetToken(CtfParser.VARIANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(CtfParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEDEF() { return GetToken(CtfParser.TYPEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(CtfParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM() { return GetToken(CtfParser.STREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENV() { return GetToken(CtfParser.ENV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRACE() { return GetToken(CtfParser.TRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOCK() { return GetToken(CtfParser.CLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLSITE() { return GetToken(CtfParser.CALLSITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIGN() { return GetToken(CtfParser.ALIGN, 0); }
		public KeywordsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywords; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterKeywords(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitKeywords(this);
		}
	}

	[RuleVersion(0)]
	public KeywordsContext keywords() {
		KeywordsContext _localctx = new KeywordsContext(Context, State);
		EnterRule(_localctx, 2, RULE_keywords);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 7515930624L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_specifiersContext declaration_specifiers() {
			return GetRuleContext<Declaration_specifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Event_declarationContext event_declaration() {
			return GetRuleContext<Event_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stream_declarationContext stream_declaration() {
			return GetRuleContext<Stream_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Env_declarationContext env_declaration() {
			return GetRuleContext<Env_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Trace_declarationContext trace_declaration() {
			return GetRuleContext<Trace_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Clock_declarationContext clock_declaration() {
			return GetRuleContext<Clock_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Callsite_declarationContext callsite_declaration() {
			return GetRuleContext<Callsite_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Typedef_declarationContext typedef_declaration() {
			return GetRuleContext<Typedef_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Typealias_declarationContext typealias_declaration() {
			return GetRuleContext<Typealias_declarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaration);
		try {
			State = 144;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENUM:
			case FLOATING_POINT:
			case INTEGER:
			case STRING:
			case STRUCT:
			case VARIANT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129;
				declaration_specifiers();
				State = 130;
				Match(T__0);
				}
				break;
			case EVENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				event_declaration();
				}
				break;
			case STREAM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 133;
				stream_declaration();
				}
				break;
			case ENV:
				EnterOuterAlt(_localctx, 4);
				{
				State = 134;
				env_declaration();
				}
				break;
			case TRACE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 135;
				trace_declaration();
				}
				break;
			case CLOCK:
				EnterOuterAlt(_localctx, 6);
				{
				State = 136;
				clock_declaration();
				}
				break;
			case CALLSITE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 137;
				callsite_declaration();
				}
				break;
			case TYPEDEF:
				EnterOuterAlt(_localctx, 8);
				{
				State = 138;
				typedef_declaration();
				State = 139;
				Match(T__0);
				}
				break;
			case TYPEALIAS:
				EnterOuterAlt(_localctx, 9);
				{
				State = 141;
				typealias_declaration();
				State = 142;
				Match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declared_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alias_declaration_specifiersContext alias_declaration_specifiers() {
			return GetRuleContext<Alias_declaration_specifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alias_abstract_declarator_listContext alias_abstract_declarator_list() {
			return GetRuleContext<Alias_abstract_declarator_listContext>(0);
		}
		public Declared_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declared_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterDeclared_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitDeclared_type(this);
		}
	}

	[RuleVersion(0)]
	public Declared_typeContext declared_type() {
		Declared_typeContext _localctx = new Declared_typeContext(Context, State);
		EnterRule(_localctx, 6, RULE_declared_type);
		try {
			State = 148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENUM:
			case FLOATING_POINT:
			case INTEGER:
			case STRING:
			case STRUCT:
			case VARIANT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146;
				alias_declaration_specifiers();
				}
				break;
			case T__0:
			case T__4:
			case T__9:
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147;
				alias_abstract_declarator_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typealias_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEALIAS() { return GetToken(CtfParser.TYPEALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_specifiersContext declaration_specifiers() {
			return GetRuleContext<Declaration_specifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Abstract_declarator_listContext abstract_declarator_list() {
			return GetRuleContext<Abstract_declarator_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declared_typeContext declared_type() {
			return GetRuleContext<Declared_typeContext>(0);
		}
		public Typealias_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typealias_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypealias_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypealias_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Typealias_declarationContext typealias_declaration() {
		Typealias_declarationContext _localctx = new Typealias_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_typealias_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(TYPEALIAS);
			State = 151;
			declaration_specifiers();
			State = 152;
			abstract_declarator_list();
			State = 153;
			Match(T__1);
			State = 154;
			declared_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typedef_declarationContext : ParserRuleContext {
		public Typedef_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedef_declaration; } }
	 
		public Typedef_declarationContext() { }
		public virtual void CopyFrom(Typedef_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeDefDeclarationContext : Typedef_declarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEDEF() { return GetToken(CtfParser.TYPEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_specifiersContext declaration_specifiers() {
			return GetRuleContext<Declaration_specifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_declarator_listContext type_declarator_list() {
			return GetRuleContext<Type_declarator_listContext>(0);
		}
		public TypeDefDeclarationContext(Typedef_declarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypeDefDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypeDefDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public Typedef_declarationContext typedef_declaration() {
		Typedef_declarationContext _localctx = new Typedef_declarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_typedef_declaration);
		try {
			_localctx = new TypeDefDeclarationContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(TYPEDEF);
			State = 157;
			declaration_specifiers();
			State = 158;
			type_declarator_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_specifiersContext : ParserRuleContext {
		public Declaration_specifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_specifiers; } }
	 
		public Declaration_specifiersContext() { }
		public virtual void CopyFrom(Declaration_specifiersContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclarationSpecifierTypeSpecifierContext : Declaration_specifiersContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_specifierContext type_specifier() {
			return GetRuleContext<Type_specifierContext>(0);
		}
		public DeclarationSpecifierTypeSpecifierContext(Declaration_specifiersContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterDeclarationSpecifierTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitDeclarationSpecifierTypeSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_specifiersContext declaration_specifiers() {
		Declaration_specifiersContext _localctx = new Declaration_specifiersContext(Context, State);
		EnterRule(_localctx, 12, RULE_declaration_specifiers);
		try {
			_localctx = new DeclarationSpecifierTypeSpecifierContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			type_specifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_specifierContext : ParserRuleContext {
		public Type_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_specifier; } }
	 
		public Type_specifierContext() { }
		public virtual void CopyFrom(Type_specifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeSpecifierIntegerContext : Type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(CtfParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ctf_expression_listContext ctf_expression_list() {
			return GetRuleContext<Ctf_expression_listContext>(0);
		}
		public TypeSpecifierIntegerContext(Type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypeSpecifierInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypeSpecifierInteger(this);
		}
	}
	public partial class TypeSpecifierStringContext : Type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CtfParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ctf_expression_listContext ctf_expression_list() {
			return GetRuleContext<Ctf_expression_listContext>(0);
		}
		public TypeSpecifierStringContext(Type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypeSpecifierString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypeSpecifierString(this);
		}
	}
	public partial class TypeSpecifierFloatingPointContext : Type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATING_POINT() { return GetToken(CtfParser.FLOATING_POINT, 0); }
		public TypeSpecifierFloatingPointContext(Type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypeSpecifierFloatingPoint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypeSpecifierFloatingPoint(this);
		}
	}
	public partial class TypeSpecifierSimpleStringContext : Type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CtfParser.STRING, 0); }
		public TypeSpecifierSimpleStringContext(Type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypeSpecifierSimpleString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypeSpecifierSimpleString(this);
		}
	}
	public partial class TypeSpecifierVariantContext : Type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANT() { return GetToken(CtfParser.VARIANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variant_type_specifierContext variant_type_specifier() {
			return GetRuleContext<Variant_type_specifierContext>(0);
		}
		public TypeSpecifierVariantContext(Type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypeSpecifierVariant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypeSpecifierVariant(this);
		}
	}
	public partial class TypeSpecifierStructContext : Type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(CtfParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_type_specifierContext struct_type_specifier() {
			return GetRuleContext<Struct_type_specifierContext>(0);
		}
		public TypeSpecifierStructContext(Type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypeSpecifierStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypeSpecifierStruct(this);
		}
	}
	public partial class TypeSpecifierFloatingPointWithFieldsContext : Type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATING_POINT() { return GetToken(CtfParser.FLOATING_POINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ctf_expression_listContext ctf_expression_list() {
			return GetRuleContext<Ctf_expression_listContext>(0);
		}
		public TypeSpecifierFloatingPointWithFieldsContext(Type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypeSpecifierFloatingPointWithFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypeSpecifierFloatingPointWithFields(this);
		}
	}
	public partial class TypeSpecifierIdentifierContext : Type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CtfParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CtfParser.IDENTIFIER, i);
		}
		public TypeSpecifierIdentifierContext(Type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypeSpecifierIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypeSpecifierIdentifier(this);
		}
	}
	public partial class TypeSpecifierEmptyIntegerContext : Type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(CtfParser.INTEGER, 0); }
		public TypeSpecifierEmptyIntegerContext(Type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypeSpecifierEmptyInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypeSpecifierEmptyInteger(this);
		}
	}
	public partial class TypeSpecifierEmptyStringContext : Type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CtfParser.STRING, 0); }
		public TypeSpecifierEmptyStringContext(Type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypeSpecifierEmptyString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypeSpecifierEmptyString(this);
		}
	}
	public partial class TypeSpecifierEnumContext : Type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(CtfParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enum_type_specifierContext enum_type_specifier() {
			return GetRuleContext<Enum_type_specifierContext>(0);
		}
		public TypeSpecifierEnumContext(Type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypeSpecifierEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypeSpecifierEnum(this);
		}
	}

	[RuleVersion(0)]
	public Type_specifierContext type_specifier() {
		Type_specifierContext _localctx = new Type_specifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_type_specifier);
		try {
			int _alt;
			State = 198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new TypeSpecifierFloatingPointContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 162;
				Match(FLOATING_POINT);
				State = 163;
				Match(T__2);
				State = 164;
				Match(T__3);
				}
				break;
			case 2:
				_localctx = new TypeSpecifierFloatingPointWithFieldsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 165;
				Match(FLOATING_POINT);
				State = 166;
				Match(T__2);
				State = 167;
				ctf_expression_list();
				State = 168;
				Match(T__3);
				}
				break;
			case 3:
				_localctx = new TypeSpecifierEmptyIntegerContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 170;
				Match(INTEGER);
				State = 171;
				Match(T__2);
				State = 172;
				Match(T__3);
				}
				break;
			case 4:
				_localctx = new TypeSpecifierIntegerContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 173;
				Match(INTEGER);
				State = 174;
				Match(T__2);
				State = 175;
				ctf_expression_list();
				State = 176;
				Match(T__3);
				}
				break;
			case 5:
				_localctx = new TypeSpecifierSimpleStringContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 178;
				Match(STRING);
				}
				break;
			case 6:
				_localctx = new TypeSpecifierEmptyStringContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 179;
				Match(STRING);
				State = 180;
				Match(T__2);
				State = 181;
				Match(T__3);
				}
				break;
			case 7:
				_localctx = new TypeSpecifierStringContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 182;
				Match(STRING);
				State = 183;
				Match(T__2);
				State = 184;
				ctf_expression_list();
				State = 185;
				Match(T__3);
				}
				break;
			case 8:
				_localctx = new TypeSpecifierEnumContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 187;
				Match(ENUM);
				State = 188;
				enum_type_specifier();
				}
				break;
			case 9:
				_localctx = new TypeSpecifierVariantContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 189;
				Match(VARIANT);
				State = 190;
				variant_type_specifier();
				}
				break;
			case 10:
				_localctx = new TypeSpecifierStructContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 191;
				Match(STRUCT);
				State = 192;
				struct_type_specifier();
				}
				break;
			case 11:
				_localctx = new TypeSpecifierIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 194;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 193;
						Match(IDENTIFIER);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 196;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Event_declaration_beginContext event_declaration_begin() {
			return GetRuleContext<Event_declaration_beginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Event_declaration_endContext event_declaration_end() {
			return GetRuleContext<Event_declaration_endContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ctf_expression_listContext ctf_expression_list() {
			return GetRuleContext<Ctf_expression_listContext>(0);
		}
		public Event_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEvent_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEvent_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Event_declarationContext event_declaration() {
		Event_declarationContext _localctx = new Event_declarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_event_declaration);
		try {
			State = 207;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 200;
				event_declaration_begin();
				State = 201;
				event_declaration_end();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203;
				event_declaration_begin();
				State = 204;
				ctf_expression_list();
				State = 205;
				event_declaration_end();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stream_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Stream_declaration_beginContext stream_declaration_begin() {
			return GetRuleContext<Stream_declaration_beginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stream_declaration_endContext stream_declaration_end() {
			return GetRuleContext<Stream_declaration_endContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stream_assignment_expression_listContext stream_assignment_expression_list() {
			return GetRuleContext<Stream_assignment_expression_listContext>(0);
		}
		public Stream_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stream_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStream_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStream_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Stream_declarationContext stream_declaration() {
		Stream_declarationContext _localctx = new Stream_declarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_stream_declaration);
		try {
			State = 216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 209;
				stream_declaration_begin();
				State = 210;
				stream_declaration_end();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 212;
				stream_declaration_begin();
				State = 213;
				stream_assignment_expression_list();
				State = 214;
				stream_declaration_end();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Env_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Env_declaration_beginContext env_declaration_begin() {
			return GetRuleContext<Env_declaration_beginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Env_declaration_endContext env_declaration_end() {
			return GetRuleContext<Env_declaration_endContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ctf_expression_listContext ctf_expression_list() {
			return GetRuleContext<Ctf_expression_listContext>(0);
		}
		public Env_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_env_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnv_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnv_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Env_declarationContext env_declaration() {
		Env_declarationContext _localctx = new Env_declarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_env_declaration);
		try {
			State = 225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218;
				env_declaration_begin();
				State = 219;
				env_declaration_end();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 221;
				env_declaration_begin();
				State = 222;
				ctf_expression_list();
				State = 223;
				env_declaration_end();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trace_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Trace_declaration_beginContext trace_declaration_begin() {
			return GetRuleContext<Trace_declaration_beginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Trace_declaration_endContext trace_declaration_end() {
			return GetRuleContext<Trace_declaration_endContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Trace_assignment_expression_listContext trace_assignment_expression_list() {
			return GetRuleContext<Trace_assignment_expression_listContext>(0);
		}
		public Trace_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trace_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTrace_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTrace_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Trace_declarationContext trace_declaration() {
		Trace_declarationContext _localctx = new Trace_declarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_trace_declaration);
		try {
			State = 234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 227;
				trace_declaration_begin();
				State = 228;
				trace_declaration_end();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 230;
				trace_declaration_begin();
				State = 231;
				trace_assignment_expression_list();
				State = 232;
				trace_declaration_end();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Clock_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOCK() { return GetToken(CtfParser.CLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Clock_declaration_beginContext clock_declaration_begin() {
			return GetRuleContext<Clock_declaration_beginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Clock_declaration_endContext clock_declaration_end() {
			return GetRuleContext<Clock_declaration_endContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ctf_expression_listContext ctf_expression_list() {
			return GetRuleContext<Ctf_expression_listContext>(0);
		}
		public Clock_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clock_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterClock_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitClock_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Clock_declarationContext clock_declaration() {
		Clock_declarationContext _localctx = new Clock_declarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_clock_declaration);
		try {
			State = 245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 236;
				Match(CLOCK);
				State = 237;
				clock_declaration_begin();
				State = 238;
				clock_declaration_end();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 240;
				Match(CLOCK);
				State = 241;
				clock_declaration_begin();
				State = 242;
				ctf_expression_list();
				State = 243;
				clock_declaration_end();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Callsite_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLSITE() { return GetToken(CtfParser.CALLSITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Callsite_declaration_beginContext callsite_declaration_begin() {
			return GetRuleContext<Callsite_declaration_beginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Callsite_declaration_endContext callsite_declaration_end() {
			return GetRuleContext<Callsite_declaration_endContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ctf_expression_listContext ctf_expression_list() {
			return GetRuleContext<Ctf_expression_listContext>(0);
		}
		public Callsite_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callsite_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterCallsite_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitCallsite_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Callsite_declarationContext callsite_declaration() {
		Callsite_declarationContext _localctx = new Callsite_declarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_callsite_declaration);
		try {
			State = 256;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247;
				Match(CALLSITE);
				State = 248;
				callsite_declaration_begin();
				State = 249;
				callsite_declaration_end();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 251;
				Match(CALLSITE);
				State = 252;
				callsite_declaration_begin();
				State = 253;
				ctf_expression_list();
				State = 254;
				callsite_declaration_end();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarator_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_declaratorContext[] type_declarator() {
			return GetRuleContexts<Type_declaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_declaratorContext type_declarator(int i) {
			return GetRuleContext<Type_declaratorContext>(i);
		}
		public Type_declarator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declarator_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterType_declarator_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitType_declarator_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarator_listContext type_declarator_list() {
		Type_declarator_listContext _localctx = new Type_declarator_listContext(Context, State);
		EnterRule(_localctx, 28, RULE_type_declarator_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			type_declarator();
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 259;
				Match(T__4);
				State = 260;
				type_declarator();
				}
				}
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Abstract_declarator_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Abstract_declaratorContext[] abstract_declarator() {
			return GetRuleContexts<Abstract_declaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Abstract_declaratorContext abstract_declarator(int i) {
			return GetRuleContext<Abstract_declaratorContext>(i);
		}
		public Abstract_declarator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstract_declarator_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterAbstract_declarator_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitAbstract_declarator_list(this);
		}
	}

	[RuleVersion(0)]
	public Abstract_declarator_listContext abstract_declarator_list() {
		Abstract_declarator_listContext _localctx = new Abstract_declarator_listContext(Context, State);
		EnterRule(_localctx, 30, RULE_abstract_declarator_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			abstract_declarator();
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 267;
				Match(T__4);
				State = 268;
				abstract_declarator();
				}
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_declaration_specifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_specifierContext type_specifier() {
			return GetRuleContext<Type_specifierContext>(0);
		}
		public Alias_declaration_specifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_declaration_specifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterAlias_declaration_specifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitAlias_declaration_specifiers(this);
		}
	}

	[RuleVersion(0)]
	public Alias_declaration_specifiersContext alias_declaration_specifiers() {
		Alias_declaration_specifiersContext _localctx = new Alias_declaration_specifiersContext(Context, State);
		EnterRule(_localctx, 32, RULE_alias_declaration_specifiers);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			type_specifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_abstract_declarator_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alias_abstract_declaratorContext[] alias_abstract_declarator() {
			return GetRuleContexts<Alias_abstract_declaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alias_abstract_declaratorContext alias_abstract_declarator(int i) {
			return GetRuleContext<Alias_abstract_declaratorContext>(i);
		}
		public Alias_abstract_declarator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_abstract_declarator_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterAlias_abstract_declarator_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitAlias_abstract_declarator_list(this);
		}
	}

	[RuleVersion(0)]
	public Alias_abstract_declarator_listContext alias_abstract_declarator_list() {
		Alias_abstract_declarator_listContext _localctx = new Alias_abstract_declarator_listContext(Context, State);
		EnterRule(_localctx, 34, RULE_alias_abstract_declarator_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			alias_abstract_declarator();
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 277;
				Match(T__4);
				State = 278;
				alias_abstract_declarator();
				}
				}
				State = 283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dynamic_scope_type_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CtfParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CtfParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_specifiersContext declaration_specifiers() {
			return GetRuleContext<Declaration_specifiersContext>(0);
		}
		public Dynamic_scope_type_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamic_scope_type_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterDynamic_scope_type_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitDynamic_scope_type_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Dynamic_scope_type_assignmentContext dynamic_scope_type_assignment() {
		Dynamic_scope_type_assignmentContext _localctx = new Dynamic_scope_type_assignmentContext(Context, State);
		EnterRule(_localctx, 36, RULE_dynamic_scope_type_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			Match(IDENTIFIER);
			State = 285;
			Match(T__5);
			State = 286;
			Match(IDENTIFIER);
			State = 287;
			Match(T__1);
			State = 288;
			declaration_specifiers();
			State = 289;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trace_assignment_expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ctf_expressionContext[] ctf_expression() {
			return GetRuleContexts<Ctf_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ctf_expressionContext ctf_expression(int i) {
			return GetRuleContext<Ctf_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dynamic_scope_type_assignmentContext[] dynamic_scope_type_assignment() {
			return GetRuleContexts<Dynamic_scope_type_assignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dynamic_scope_type_assignmentContext dynamic_scope_type_assignment(int i) {
			return GetRuleContext<Dynamic_scope_type_assignmentContext>(i);
		}
		public Trace_assignment_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trace_assignment_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTrace_assignment_expression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTrace_assignment_expression_list(this);
		}
	}

	[RuleVersion(0)]
	public Trace_assignment_expression_listContext trace_assignment_expression_list() {
		Trace_assignment_expression_listContext _localctx = new Trace_assignment_expression_listContext(Context, State);
		EnterRule(_localctx, 38, RULE_trace_assignment_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 293;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 291;
					ctf_expression();
					}
					break;
				case 2:
					{
					State = 292;
					dynamic_scope_type_assignment();
					}
					break;
				}
				}
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 3435973673984L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stream_assignment_expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ctf_expressionContext[] ctf_expression() {
			return GetRuleContexts<Ctf_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ctf_expressionContext ctf_expression(int i) {
			return GetRuleContext<Ctf_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dynamic_scope_type_assignmentContext[] dynamic_scope_type_assignment() {
			return GetRuleContexts<Dynamic_scope_type_assignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dynamic_scope_type_assignmentContext dynamic_scope_type_assignment(int i) {
			return GetRuleContext<Dynamic_scope_type_assignmentContext>(i);
		}
		public Stream_assignment_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stream_assignment_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStream_assignment_expression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStream_assignment_expression_list(this);
		}
	}

	[RuleVersion(0)]
	public Stream_assignment_expression_listContext stream_assignment_expression_list() {
		Stream_assignment_expression_listContext _localctx = new Stream_assignment_expression_listContext(Context, State);
		EnterRule(_localctx, 40, RULE_stream_assignment_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 299;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 297;
					ctf_expression();
					}
					break;
				case 2:
					{
					State = 298;
					dynamic_scope_type_assignment();
					}
					break;
				}
				}
				State = 301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 3435973673984L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ctf_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ctf_assignment_expressionContext ctf_assignment_expression() {
			return GetRuleContext<Ctf_assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Typedef_declarationContext typedef_declaration() {
			return GetRuleContext<Typedef_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Typealias_declarationContext typealias_declaration() {
			return GetRuleContext<Typealias_declarationContext>(0);
		}
		public Ctf_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctf_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterCtf_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitCtf_expression(this);
		}
	}

	[RuleVersion(0)]
	public Ctf_expressionContext ctf_expression() {
		Ctf_expressionContext _localctx = new Ctf_expressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_ctf_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 303;
				ctf_assignment_expression();
				}
				break;
			case 2:
				{
				State = 304;
				typedef_declaration();
				}
				break;
			case 3:
				{
				State = 305;
				typealias_declaration();
				}
				break;
			}
			State = 308;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ctf_expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ctf_expressionContext[] ctf_expression() {
			return GetRuleContexts<Ctf_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ctf_expressionContext ctf_expression(int i) {
			return GetRuleContext<Ctf_expressionContext>(i);
		}
		public Ctf_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctf_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterCtf_expression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitCtf_expression_list(this);
		}
	}

	[RuleVersion(0)]
	public Ctf_expression_listContext ctf_expression_list() {
		Ctf_expression_listContext _localctx = new Ctf_expression_listContext(Context, State);
		EnterRule(_localctx, 44, RULE_ctf_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 310;
				ctf_expression();
				}
				}
				State = 313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 3435973673984L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_type_specifierContext : ParserRuleContext {
		public Enum_type_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_type_specifier; } }
	 
		public Enum_type_specifierContext() { }
		public virtual void CopyFrom(Enum_type_specifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnonymousEnumTypeSpecifiedBaseContext : Enum_type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enum_integer_declaration_specifiersContext enum_integer_declaration_specifiers() {
			return GetRuleContext<Enum_integer_declaration_specifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enumerator_listContext enumerator_list() {
			return GetRuleContext<Enumerator_listContext>(0);
		}
		public AnonymousEnumTypeSpecifiedBaseContext(Enum_type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterAnonymousEnumTypeSpecifiedBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitAnonymousEnumTypeSpecifiedBase(this);
		}
	}
	public partial class AnonymousEnumTypeDefaultBaseContext : Enum_type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enumerator_listContext enumerator_list() {
			return GetRuleContext<Enumerator_listContext>(0);
		}
		public AnonymousEnumTypeDefaultBaseContext(Enum_type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterAnonymousEnumTypeDefaultBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitAnonymousEnumTypeDefaultBase(this);
		}
	}
	public partial class NamedEnumTypeSpecifiedBaseContext : Enum_type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enum_integer_declaration_specifiersContext enum_integer_declaration_specifiers() {
			return GetRuleContext<Enum_integer_declaration_specifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enumerator_listContext enumerator_list() {
			return GetRuleContext<Enumerator_listContext>(0);
		}
		public NamedEnumTypeSpecifiedBaseContext(Enum_type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterNamedEnumTypeSpecifiedBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitNamedEnumTypeSpecifiedBase(this);
		}
	}
	public partial class NamedEnumTypeDefaultBaseContext : Enum_type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enumerator_listContext enumerator_list() {
			return GetRuleContext<Enumerator_listContext>(0);
		}
		public NamedEnumTypeDefaultBaseContext(Enum_type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterNamedEnumTypeDefaultBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitNamedEnumTypeDefaultBase(this);
		}
	}

	[RuleVersion(0)]
	public Enum_type_specifierContext enum_type_specifier() {
		Enum_type_specifierContext _localctx = new Enum_type_specifierContext(Context, State);
		EnterRule(_localctx, 46, RULE_enum_type_specifier);
		try {
			State = 363;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				_localctx = new AnonymousEnumTypeDefaultBaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 315;
				Match(T__2);
				State = 316;
				enumerator_list();
				State = 317;
				Match(T__3);
				}
				break;
			case 2:
				_localctx = new AnonymousEnumTypeDefaultBaseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 319;
				Match(T__2);
				State = 320;
				enumerator_list();
				State = 321;
				Match(T__4);
				State = 322;
				Match(T__3);
				}
				break;
			case 3:
				_localctx = new AnonymousEnumTypeSpecifiedBaseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 324;
				Match(T__6);
				State = 325;
				enum_integer_declaration_specifiers(0);
				State = 326;
				Match(T__2);
				State = 327;
				enumerator_list();
				State = 328;
				Match(T__3);
				}
				break;
			case 4:
				_localctx = new AnonymousEnumTypeSpecifiedBaseContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 330;
				Match(T__6);
				State = 331;
				enum_integer_declaration_specifiers(0);
				State = 332;
				Match(T__2);
				State = 333;
				enumerator_list();
				State = 334;
				Match(T__4);
				State = 335;
				Match(T__3);
				}
				break;
			case 5:
				_localctx = new NamedEnumTypeDefaultBaseContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 337;
				Match(IDENTIFIER);
				State = 338;
				Match(T__2);
				State = 339;
				enumerator_list();
				State = 340;
				Match(T__3);
				}
				break;
			case 6:
				_localctx = new NamedEnumTypeDefaultBaseContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 342;
				Match(IDENTIFIER);
				State = 343;
				Match(T__2);
				State = 344;
				enumerator_list();
				State = 345;
				Match(T__4);
				State = 346;
				Match(T__3);
				}
				break;
			case 7:
				_localctx = new NamedEnumTypeSpecifiedBaseContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 348;
				Match(IDENTIFIER);
				State = 349;
				Match(T__6);
				State = 350;
				enum_integer_declaration_specifiers(0);
				State = 351;
				Match(T__2);
				State = 352;
				enumerator_list();
				State = 353;
				Match(T__3);
				}
				break;
			case 8:
				_localctx = new NamedEnumTypeSpecifiedBaseContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 355;
				Match(IDENTIFIER);
				State = 356;
				Match(T__6);
				State = 357;
				enum_integer_declaration_specifiers(0);
				State = 358;
				Match(T__2);
				State = 359;
				enumerator_list();
				State = 360;
				Match(T__4);
				State = 361;
				Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_type_specifierContext : ParserRuleContext {
		public Variant_type_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_type_specifier; } }
	 
		public Variant_type_specifierContext() { }
		public virtual void CopyFrom(Variant_type_specifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedVariantNoTagContext : Variant_type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variant_declaration_beginContext variant_declaration_begin() {
			return GetRuleContext<Variant_declaration_beginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_or_variant_declaration_listContext struct_or_variant_declaration_list() {
			return GetRuleContext<Struct_or_variant_declaration_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variant_declaration_endContext variant_declaration_end() {
			return GetRuleContext<Variant_declaration_endContext>(0);
		}
		public NamedVariantNoTagContext(Variant_type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterNamedVariantNoTag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitNamedVariantNoTag(this);
		}
	}
	public partial class AnonymousVariantContext : Variant_type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variant_declaration_beginContext variant_declaration_begin() {
			return GetRuleContext<Variant_declaration_beginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_or_variant_declaration_listContext struct_or_variant_declaration_list() {
			return GetRuleContext<Struct_or_variant_declaration_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variant_declaration_endContext variant_declaration_end() {
			return GetRuleContext<Variant_declaration_endContext>(0);
		}
		public AnonymousVariantContext(Variant_type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterAnonymousVariant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitAnonymousVariant(this);
		}
	}
	public partial class NamedVariantContext : Variant_type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CtfParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CtfParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variant_declaration_beginContext variant_declaration_begin() {
			return GetRuleContext<Variant_declaration_beginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_or_variant_declaration_listContext struct_or_variant_declaration_list() {
			return GetRuleContext<Struct_or_variant_declaration_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variant_declaration_endContext variant_declaration_end() {
			return GetRuleContext<Variant_declaration_endContext>(0);
		}
		public NamedVariantContext(Variant_type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterNamedVariant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitNamedVariant(this);
		}
	}
	public partial class AnonymousVariantNoTagContext : Variant_type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variant_declaration_beginContext variant_declaration_begin() {
			return GetRuleContext<Variant_declaration_beginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_or_variant_declaration_listContext struct_or_variant_declaration_list() {
			return GetRuleContext<Struct_or_variant_declaration_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variant_declaration_endContext variant_declaration_end() {
			return GetRuleContext<Variant_declaration_endContext>(0);
		}
		public AnonymousVariantNoTagContext(Variant_type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterAnonymousVariantNoTag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitAnonymousVariantNoTag(this);
		}
	}
	public partial class NamedVariantNoBodyContext : Variant_type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CtfParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CtfParser.IDENTIFIER, i);
		}
		public NamedVariantNoBodyContext(Variant_type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterNamedVariantNoBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitNamedVariantNoBody(this);
		}
	}

	[RuleVersion(0)]
	public Variant_type_specifierContext variant_type_specifier() {
		Variant_type_specifierContext _localctx = new Variant_type_specifierContext(Context, State);
		EnterRule(_localctx, 48, RULE_variant_type_specifier);
		try {
			State = 393;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				_localctx = new AnonymousVariantNoTagContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 365;
				variant_declaration_begin();
				State = 366;
				struct_or_variant_declaration_list();
				State = 367;
				variant_declaration_end();
				}
				break;
			case 2:
				_localctx = new AnonymousVariantContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 369;
				Match(T__7);
				State = 370;
				Match(IDENTIFIER);
				State = 371;
				Match(T__8);
				State = 372;
				variant_declaration_begin();
				State = 373;
				struct_or_variant_declaration_list();
				State = 374;
				variant_declaration_end();
				}
				break;
			case 3:
				_localctx = new NamedVariantNoTagContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 376;
				Match(IDENTIFIER);
				State = 377;
				variant_declaration_begin();
				State = 378;
				struct_or_variant_declaration_list();
				State = 379;
				variant_declaration_end();
				}
				break;
			case 4:
				_localctx = new NamedVariantContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 381;
				Match(IDENTIFIER);
				State = 382;
				Match(T__7);
				State = 383;
				Match(IDENTIFIER);
				State = 384;
				Match(T__8);
				State = 385;
				variant_declaration_begin();
				State = 386;
				struct_or_variant_declaration_list();
				State = 387;
				variant_declaration_end();
				}
				break;
			case 5:
				_localctx = new NamedVariantNoBodyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 389;
				Match(IDENTIFIER);
				State = 390;
				Match(T__7);
				State = 391;
				Match(IDENTIFIER);
				State = 392;
				Match(T__8);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_type_specifierContext : ParserRuleContext {
		public Struct_type_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_type_specifier; } }
	 
		public Struct_type_specifierContext() { }
		public virtual void CopyFrom(Struct_type_specifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructAsTypeContext : Struct_type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		public StructAsTypeContext(Struct_type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStructAsType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStructAsType(this);
		}
	}
	public partial class AnonymousStructContext : Struct_type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declaration_beginContext struct_declaration_begin() {
			return GetRuleContext<Struct_declaration_beginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_or_variant_declaration_listContext struct_or_variant_declaration_list() {
			return GetRuleContext<Struct_or_variant_declaration_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declaration_endContext struct_declaration_end() {
			return GetRuleContext<Struct_declaration_endContext>(0);
		}
		public AnonymousStructContext(Struct_type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterAnonymousStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitAnonymousStruct(this);
		}
	}
	public partial class NamedAlignedStructContext : Struct_type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declaration_beginContext struct_declaration_begin() {
			return GetRuleContext<Struct_declaration_beginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_or_variant_declaration_listContext struct_or_variant_declaration_list() {
			return GetRuleContext<Struct_or_variant_declaration_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declaration_endContext struct_declaration_end() {
			return GetRuleContext<Struct_declaration_endContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIGN() { return GetToken(CtfParser.ALIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public NamedAlignedStructContext(Struct_type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterNamedAlignedStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitNamedAlignedStruct(this);
		}
	}
	public partial class NamedStructContext : Struct_type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declaration_beginContext struct_declaration_begin() {
			return GetRuleContext<Struct_declaration_beginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_or_variant_declaration_listContext struct_or_variant_declaration_list() {
			return GetRuleContext<Struct_or_variant_declaration_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declaration_endContext struct_declaration_end() {
			return GetRuleContext<Struct_declaration_endContext>(0);
		}
		public NamedStructContext(Struct_type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterNamedStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitNamedStruct(this);
		}
	}
	public partial class AnonymousAlignedStructContext : Struct_type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declaration_beginContext struct_declaration_begin() {
			return GetRuleContext<Struct_declaration_beginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_or_variant_declaration_listContext struct_or_variant_declaration_list() {
			return GetRuleContext<Struct_or_variant_declaration_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declaration_endContext struct_declaration_end() {
			return GetRuleContext<Struct_declaration_endContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIGN() { return GetToken(CtfParser.ALIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public AnonymousAlignedStructContext(Struct_type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterAnonymousAlignedStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitAnonymousAlignedStruct(this);
		}
	}

	[RuleVersion(0)]
	public Struct_type_specifierContext struct_type_specifier() {
		Struct_type_specifierContext _localctx = new Struct_type_specifierContext(Context, State);
		EnterRule(_localctx, 50, RULE_struct_type_specifier);
		try {
			State = 422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				_localctx = new AnonymousStructContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 395;
				struct_declaration_begin();
				State = 396;
				struct_or_variant_declaration_list();
				State = 397;
				struct_declaration_end();
				}
				break;
			case 2:
				_localctx = new NamedStructContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 399;
				Match(IDENTIFIER);
				State = 400;
				struct_declaration_begin();
				State = 401;
				struct_or_variant_declaration_list();
				State = 402;
				struct_declaration_end();
				}
				break;
			case 3:
				_localctx = new StructAsTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 404;
				Match(IDENTIFIER);
				}
				break;
			case 4:
				_localctx = new AnonymousAlignedStructContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 405;
				struct_declaration_begin();
				State = 406;
				struct_or_variant_declaration_list();
				State = 407;
				struct_declaration_end();
				State = 408;
				Match(ALIGN);
				State = 409;
				Match(T__9);
				State = 410;
				unary_expression();
				State = 411;
				Match(T__10);
				}
				break;
			case 5:
				_localctx = new NamedAlignedStructContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 413;
				Match(IDENTIFIER);
				State = 414;
				struct_declaration_begin();
				State = 415;
				struct_or_variant_declaration_list();
				State = 416;
				struct_declaration_end();
				State = 417;
				Match(ALIGN);
				State = 418;
				Match(T__9);
				State = 419;
				unary_expression();
				State = 420;
				Match(T__10);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_declaration_beginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(CtfParser.EVENT, 0); }
		public Event_declaration_beginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_declaration_begin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEvent_declaration_begin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEvent_declaration_begin(this);
		}
	}

	[RuleVersion(0)]
	public Event_declaration_beginContext event_declaration_begin() {
		Event_declaration_beginContext _localctx = new Event_declaration_beginContext(Context, State);
		EnterRule(_localctx, 52, RULE_event_declaration_begin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			Match(EVENT);
			State = 425;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_declaration_endContext : ParserRuleContext {
		public Event_declaration_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_declaration_end; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEvent_declaration_end(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEvent_declaration_end(this);
		}
	}

	[RuleVersion(0)]
	public Event_declaration_endContext event_declaration_end() {
		Event_declaration_endContext _localctx = new Event_declaration_endContext(Context, State);
		EnterRule(_localctx, 54, RULE_event_declaration_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			Match(T__3);
			State = 428;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stream_declaration_beginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM() { return GetToken(CtfParser.STREAM, 0); }
		public Stream_declaration_beginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stream_declaration_begin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStream_declaration_begin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStream_declaration_begin(this);
		}
	}

	[RuleVersion(0)]
	public Stream_declaration_beginContext stream_declaration_begin() {
		Stream_declaration_beginContext _localctx = new Stream_declaration_beginContext(Context, State);
		EnterRule(_localctx, 56, RULE_stream_declaration_begin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			Match(STREAM);
			State = 431;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stream_declaration_endContext : ParserRuleContext {
		public Stream_declaration_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stream_declaration_end; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStream_declaration_end(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStream_declaration_end(this);
		}
	}

	[RuleVersion(0)]
	public Stream_declaration_endContext stream_declaration_end() {
		Stream_declaration_endContext _localctx = new Stream_declaration_endContext(Context, State);
		EnterRule(_localctx, 58, RULE_stream_declaration_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			Match(T__3);
			State = 434;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Env_declaration_beginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENV() { return GetToken(CtfParser.ENV, 0); }
		public Env_declaration_beginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_env_declaration_begin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnv_declaration_begin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnv_declaration_begin(this);
		}
	}

	[RuleVersion(0)]
	public Env_declaration_beginContext env_declaration_begin() {
		Env_declaration_beginContext _localctx = new Env_declaration_beginContext(Context, State);
		EnterRule(_localctx, 60, RULE_env_declaration_begin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436;
			Match(ENV);
			State = 437;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Env_declaration_endContext : ParserRuleContext {
		public Env_declaration_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_env_declaration_end; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnv_declaration_end(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnv_declaration_end(this);
		}
	}

	[RuleVersion(0)]
	public Env_declaration_endContext env_declaration_end() {
		Env_declaration_endContext _localctx = new Env_declaration_endContext(Context, State);
		EnterRule(_localctx, 62, RULE_env_declaration_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			Match(T__3);
			State = 440;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trace_declaration_beginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRACE() { return GetToken(CtfParser.TRACE, 0); }
		public Trace_declaration_beginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trace_declaration_begin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTrace_declaration_begin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTrace_declaration_begin(this);
		}
	}

	[RuleVersion(0)]
	public Trace_declaration_beginContext trace_declaration_begin() {
		Trace_declaration_beginContext _localctx = new Trace_declaration_beginContext(Context, State);
		EnterRule(_localctx, 64, RULE_trace_declaration_begin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			Match(TRACE);
			State = 443;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trace_declaration_endContext : ParserRuleContext {
		public Trace_declaration_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trace_declaration_end; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTrace_declaration_end(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTrace_declaration_end(this);
		}
	}

	[RuleVersion(0)]
	public Trace_declaration_endContext trace_declaration_end() {
		Trace_declaration_endContext _localctx = new Trace_declaration_endContext(Context, State);
		EnterRule(_localctx, 66, RULE_trace_declaration_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			Match(T__3);
			State = 446;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Clock_declaration_beginContext : ParserRuleContext {
		public Clock_declaration_beginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clock_declaration_begin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterClock_declaration_begin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitClock_declaration_begin(this);
		}
	}

	[RuleVersion(0)]
	public Clock_declaration_beginContext clock_declaration_begin() {
		Clock_declaration_beginContext _localctx = new Clock_declaration_beginContext(Context, State);
		EnterRule(_localctx, 68, RULE_clock_declaration_begin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Clock_declaration_endContext : ParserRuleContext {
		public Clock_declaration_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clock_declaration_end; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterClock_declaration_end(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitClock_declaration_end(this);
		}
	}

	[RuleVersion(0)]
	public Clock_declaration_endContext clock_declaration_end() {
		Clock_declaration_endContext _localctx = new Clock_declaration_endContext(Context, State);
		EnterRule(_localctx, 70, RULE_clock_declaration_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			Match(T__3);
			State = 451;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Callsite_declaration_beginContext : ParserRuleContext {
		public Callsite_declaration_beginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callsite_declaration_begin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterCallsite_declaration_begin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitCallsite_declaration_begin(this);
		}
	}

	[RuleVersion(0)]
	public Callsite_declaration_beginContext callsite_declaration_begin() {
		Callsite_declaration_beginContext _localctx = new Callsite_declaration_beginContext(Context, State);
		EnterRule(_localctx, 72, RULE_callsite_declaration_begin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Callsite_declaration_endContext : ParserRuleContext {
		public Callsite_declaration_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callsite_declaration_end; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterCallsite_declaration_end(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitCallsite_declaration_end(this);
		}
	}

	[RuleVersion(0)]
	public Callsite_declaration_endContext callsite_declaration_end() {
		Callsite_declaration_endContext _localctx = new Callsite_declaration_endContext(Context, State);
		EnterRule(_localctx, 74, RULE_callsite_declaration_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			Match(T__3);
			State = 456;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_declaratorContext type_declarator() {
			return GetRuleContext<Type_declaratorContext>(0);
		}
		public Type_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterType_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitType_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Type_declaratorContext type_declarator() {
		Type_declaratorContext _localctx = new Type_declaratorContext(Context, State);
		EnterRule(_localctx, 76, RULE_type_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 458;
				Match(IDENTIFIER);
				}
				break;
			case T__9:
				{
				{
				State = 459;
				Match(T__9);
				State = 460;
				type_declarator();
				State = 461;
				Match(T__10);
				}
				}
				break;
			case T__0:
			case T__4:
			case T__10:
			case T__11:
				break;
			default:
				break;
			}
			State = 471;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 465;
				Match(T__11);
				State = 466;
				unary_expression();
				State = 467;
				Match(T__12);
				}
				}
				State = 473;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Abstract_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Abstract_declaratorContext abstract_declarator() {
			return GetRuleContext<Abstract_declaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		public Abstract_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstract_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterAbstract_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitAbstract_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Abstract_declaratorContext abstract_declarator() {
		Abstract_declaratorContext _localctx = new Abstract_declaratorContext(Context, State);
		EnterRule(_localctx, 78, RULE_abstract_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 474;
				Match(IDENTIFIER);
				}
				break;
			case T__9:
				{
				State = 475;
				Match(T__9);
				State = 476;
				abstract_declarator();
				State = 477;
				Match(T__10);
				}
				break;
			case T__1:
			case T__4:
			case T__10:
			case T__11:
				break;
			default:
				break;
			}
			State = 488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 481;
				Match(T__11);
				State = 483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 3428001612800L) != 0) {
					{
					State = 482;
					unary_expression();
					}
				}

				State = 485;
				Match(T__12);
				}
				}
				State = 490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_abstract_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alias_abstract_declaratorContext alias_abstract_declarator() {
			return GetRuleContext<Alias_abstract_declaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		public Alias_abstract_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_abstract_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterAlias_abstract_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitAlias_abstract_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Alias_abstract_declaratorContext alias_abstract_declarator() {
		Alias_abstract_declaratorContext _localctx = new Alias_abstract_declaratorContext(Context, State);
		EnterRule(_localctx, 80, RULE_alias_abstract_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 491;
				Match(T__9);
				State = 492;
				alias_abstract_declarator();
				State = 493;
				Match(T__10);
				}
			}

			State = 504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 497;
				Match(T__11);
				State = 499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 3428001612800L) != 0) {
					{
					State = 498;
					unary_expression();
					}
				}

				State = 501;
				Match(T__12);
				}
				}
				State = 506;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ctf_assignment_expressionContext : ParserRuleContext {
		public Ctf_assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctf_assignment_expression; } }
	 
		public Ctf_assignment_expressionContext() { }
		public virtual void CopyFrom(Ctf_assignment_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CtfTypeAssignmentContext : Ctf_assignment_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_specifiersContext declaration_specifiers() {
			return GetRuleContext<Declaration_specifiersContext>(0);
		}
		public CtfTypeAssignmentContext(Ctf_assignment_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterCtfTypeAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitCtfTypeAssignment(this);
		}
	}
	public partial class CtfDynamicScopeAssignmentContext : Ctf_assignment_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dynamic_referenceContext dynamic_reference() {
			return GetRuleContext<Dynamic_referenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public CtfDynamicScopeAssignmentContext(Ctf_assignment_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterCtfDynamicScopeAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitCtfDynamicScopeAssignment(this);
		}
	}
	public partial class CtfIdentifierAssignmentContext : Ctf_assignment_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public CtfIdentifierAssignmentContext(Ctf_assignment_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterCtfIdentifierAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitCtfIdentifierAssignment(this);
		}
	}
	public partial class CtfKeywordAssignmentContext : Ctf_assignment_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordsContext keywords() {
			return GetRuleContext<KeywordsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public CtfKeywordAssignmentContext(Ctf_assignment_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterCtfKeywordAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitCtfKeywordAssignment(this);
		}
	}

	[RuleVersion(0)]
	public Ctf_assignment_expressionContext ctf_assignment_expression() {
		Ctf_assignment_expressionContext _localctx = new Ctf_assignment_expressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_ctf_assignment_expression);
		try {
			State = 522;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				_localctx = new CtfIdentifierAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 507;
				Match(IDENTIFIER);
				State = 508;
				Match(T__13);
				State = 509;
				unary_expression();
				}
				break;
			case 2:
				_localctx = new CtfDynamicScopeAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 510;
				dynamic_reference();
				State = 511;
				Match(T__13);
				State = 512;
				unary_expression();
				}
				break;
			case 3:
				_localctx = new CtfKeywordAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 514;
				keywords();
				State = 515;
				Match(T__13);
				State = 516;
				unary_expression();
				}
				break;
			case 4:
				_localctx = new CtfTypeAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 518;
				unary_expression();
				State = 519;
				Match(T__1);
				State = 520;
				declaration_specifiers();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enumerator_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorContext[] enumerator() {
			return GetRuleContexts<EnumeratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorContext enumerator(int i) {
			return GetRuleContext<EnumeratorContext>(i);
		}
		public Enumerator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumerator_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumerator_list(this);
		}
	}

	[RuleVersion(0)]
	public Enumerator_listContext enumerator_list() {
		Enumerator_listContext _localctx = new Enumerator_listContext(Context, State);
		EnterRule(_localctx, 84, RULE_enumerator_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			enumerator();
			State = 529;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 525;
					Match(T__4);
					State = 526;
					enumerator();
					}
					} 
				}
				State = 531;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_integer_declaration_specifiersContext : ParserRuleContext {
		public Enum_integer_declaration_specifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_integer_declaration_specifiers; } }
	 
		public Enum_integer_declaration_specifiersContext() { }
		public virtual void CopyFrom(Enum_integer_declaration_specifiersContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EnumIntegerDeclarationsAndTypeSpecifierContext : Enum_integer_declaration_specifiersContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enum_integer_declaration_specifiersContext enum_integer_declaration_specifiers() {
			return GetRuleContext<Enum_integer_declaration_specifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_integer_type_specifierContext enum_integer_type_specifier() {
			return GetRuleContext<Enum_integer_type_specifierContext>(0);
		}
		public EnumIntegerDeclarationsAndTypeSpecifierContext(Enum_integer_declaration_specifiersContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumIntegerDeclarationsAndTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumIntegerDeclarationsAndTypeSpecifier(this);
		}
	}
	public partial class EnumIntegerDeclarationTypeSpecifierContext : Enum_integer_declaration_specifiersContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enum_integer_type_specifierContext enum_integer_type_specifier() {
			return GetRuleContext<Enum_integer_type_specifierContext>(0);
		}
		public EnumIntegerDeclarationTypeSpecifierContext(Enum_integer_declaration_specifiersContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumIntegerDeclarationTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumIntegerDeclarationTypeSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public Enum_integer_declaration_specifiersContext enum_integer_declaration_specifiers() {
		return enum_integer_declaration_specifiers(0);
	}

	private Enum_integer_declaration_specifiersContext enum_integer_declaration_specifiers(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Enum_integer_declaration_specifiersContext _localctx = new Enum_integer_declaration_specifiersContext(Context, _parentState);
		Enum_integer_declaration_specifiersContext _prevctx = _localctx;
		int _startState = 86;
		EnterRecursionRule(_localctx, 86, RULE_enum_integer_declaration_specifiers, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new EnumIntegerDeclarationTypeSpecifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 533;
			enum_integer_type_specifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 539;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new EnumIntegerDeclarationsAndTypeSpecifierContext(new Enum_integer_declaration_specifiersContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_enum_integer_declaration_specifiers);
					State = 535;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 536;
					enum_integer_type_specifier();
					}
					} 
				}
				State = 541;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Variant_declaration_beginContext : ParserRuleContext {
		public Variant_declaration_beginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_declaration_begin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterVariant_declaration_begin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitVariant_declaration_begin(this);
		}
	}

	[RuleVersion(0)]
	public Variant_declaration_beginContext variant_declaration_begin() {
		Variant_declaration_beginContext _localctx = new Variant_declaration_beginContext(Context, State);
		EnterRule(_localctx, 88, RULE_variant_declaration_begin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_declaration_endContext : ParserRuleContext {
		public Variant_declaration_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_declaration_end; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterVariant_declaration_end(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitVariant_declaration_end(this);
		}
	}

	[RuleVersion(0)]
	public Variant_declaration_endContext variant_declaration_end() {
		Variant_declaration_endContext _localctx = new Variant_declaration_endContext(Context, State);
		EnterRule(_localctx, 90, RULE_variant_declaration_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_or_variant_declaration_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_or_variant_declarationContext[] struct_or_variant_declaration() {
			return GetRuleContexts<Struct_or_variant_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_or_variant_declarationContext struct_or_variant_declaration(int i) {
			return GetRuleContext<Struct_or_variant_declarationContext>(i);
		}
		public Struct_or_variant_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_or_variant_declaration_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStruct_or_variant_declaration_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStruct_or_variant_declaration_list(this);
		}
	}

	[RuleVersion(0)]
	public Struct_or_variant_declaration_listContext struct_or_variant_declaration_list() {
		Struct_or_variant_declaration_listContext _localctx = new Struct_or_variant_declaration_listContext(Context, State);
		EnterRule(_localctx, 92, RULE_struct_or_variant_declaration_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 76690751488L) != 0) {
				{
				{
				State = 546;
				struct_or_variant_declaration();
				}
				}
				State = 551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_declaration_beginContext : ParserRuleContext {
		public Struct_declaration_beginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_declaration_begin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStruct_declaration_begin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStruct_declaration_begin(this);
		}
	}

	[RuleVersion(0)]
	public Struct_declaration_beginContext struct_declaration_begin() {
		Struct_declaration_beginContext _localctx = new Struct_declaration_beginContext(Context, State);
		EnterRule(_localctx, 94, RULE_struct_declaration_begin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_declaration_endContext : ParserRuleContext {
		public Struct_declaration_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_declaration_end; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStruct_declaration_end(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStruct_declaration_end(this);
		}
	}

	[RuleVersion(0)]
	public Struct_declaration_endContext struct_declaration_end() {
		Struct_declaration_endContext _localctx = new Struct_declaration_endContext(Context, State);
		EnterRule(_localctx, 96, RULE_struct_declaration_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
	 
		public Unary_expressionContext() { }
		public virtual void CopyFrom(Unary_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PostfixExpressionUnaryExpressionContext : Unary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		public PostfixExpressionUnaryExpressionContext(Unary_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterPostfixExpressionUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitPostfixExpressionUnaryExpression(this);
		}
	}
	public partial class PositiveUnaryExpressionContext : Unary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public PositiveUnaryExpressionContext(Unary_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterPositiveUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitPositiveUnaryExpression(this);
		}
	}
	public partial class NegativeUnaryExpressionContext : Unary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public NegativeUnaryExpressionContext(Unary_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterNegativeUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitNegativeUnaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 98, RULE_unary_expression);
		try {
			State = 561;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
			case CLOCK:
			case ENV:
			case EVENT:
			case STREAM:
			case TRACE:
			case DECIMAL_LITERAL:
			case OCTAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case IDENTIFIER:
			case STRING_LITERAL:
			case CHARACTER_LITERAL:
				_localctx = new PostfixExpressionUnaryExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 556;
				postfix_expression();
				}
				break;
			case T__14:
				_localctx = new PositiveUnaryExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 557;
				Match(T__14);
				State = 558;
				unary_expression();
				}
				break;
			case T__15:
				_localctx = new NegativeUnaryExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 559;
				Match(T__15);
				State = 560;
				unary_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorContext : ParserRuleContext {
		public EnumeratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator; } }
	 
		public EnumeratorContext() { }
		public virtual void CopyFrom(EnumeratorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EnumIdentifierAssignedValueContext : EnumeratorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enumerator_mappingContext enumerator_mapping() {
			return GetRuleContext<Enumerator_mappingContext>(0);
		}
		public EnumIdentifierAssignedValueContext(EnumeratorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumIdentifierAssignedValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumIdentifierAssignedValue(this);
		}
	}
	public partial class EnumKeywordAssignedValueContext : EnumeratorContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordsContext keywords() {
			return GetRuleContext<KeywordsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enumerator_mappingContext enumerator_mapping() {
			return GetRuleContext<Enumerator_mappingContext>(0);
		}
		public EnumKeywordAssignedValueContext(EnumeratorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumKeywordAssignedValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumKeywordAssignedValue(this);
		}
	}
	public partial class EnumStringLiteralValueContext : EnumeratorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CtfParser.STRING_LITERAL, 0); }
		public EnumStringLiteralValueContext(EnumeratorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumStringLiteralValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumStringLiteralValue(this);
		}
	}
	public partial class EnumStringLiteralAssignedValueContext : EnumeratorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CtfParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enumerator_mappingContext enumerator_mapping() {
			return GetRuleContext<Enumerator_mappingContext>(0);
		}
		public EnumStringLiteralAssignedValueContext(EnumeratorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumStringLiteralAssignedValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumStringLiteralAssignedValue(this);
		}
	}
	public partial class EnumKeywordValueContext : EnumeratorContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordsContext keywords() {
			return GetRuleContext<KeywordsContext>(0);
		}
		public EnumKeywordValueContext(EnumeratorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumKeywordValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumKeywordValue(this);
		}
	}
	public partial class EnumIdentifierValueContext : EnumeratorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		public EnumIdentifierValueContext(EnumeratorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumIdentifierValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumIdentifierValue(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorContext enumerator() {
		EnumeratorContext _localctx = new EnumeratorContext(Context, State);
		EnterRule(_localctx, 100, RULE_enumerator);
		try {
			State = 576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				_localctx = new EnumIdentifierValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 563;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				_localctx = new EnumKeywordValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 564;
				keywords();
				}
				break;
			case 3:
				_localctx = new EnumStringLiteralValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 565;
				Match(STRING_LITERAL);
				}
				break;
			case 4:
				_localctx = new EnumIdentifierAssignedValueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 566;
				Match(IDENTIFIER);
				State = 567;
				Match(T__13);
				State = 568;
				enumerator_mapping();
				}
				break;
			case 5:
				_localctx = new EnumKeywordAssignedValueContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 569;
				keywords();
				State = 570;
				Match(T__13);
				State = 571;
				enumerator_mapping();
				}
				break;
			case 6:
				_localctx = new EnumStringLiteralAssignedValueContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 573;
				Match(STRING_LITERAL);
				State = 574;
				Match(T__13);
				State = 575;
				enumerator_mapping();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_integer_type_specifierContext : ParserRuleContext {
		public Enum_integer_type_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_integer_type_specifier; } }
	 
		public Enum_integer_type_specifierContext() { }
		public virtual void CopyFrom(Enum_integer_type_specifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EnumIntegerSpecifierWithDefaultsContext : Enum_integer_type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(CtfParser.INTEGER, 0); }
		public EnumIntegerSpecifierWithDefaultsContext(Enum_integer_type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumIntegerSpecifierWithDefaults(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumIntegerSpecifierWithDefaults(this);
		}
	}
	public partial class EnumIntegerSpecifierFromTypeContext : Enum_integer_type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		public EnumIntegerSpecifierFromTypeContext(Enum_integer_type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumIntegerSpecifierFromType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumIntegerSpecifierFromType(this);
		}
	}
	public partial class EnumIntegerSpecifierContext : Enum_integer_type_specifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(CtfParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ctf_expression_listContext ctf_expression_list() {
			return GetRuleContext<Ctf_expression_listContext>(0);
		}
		public EnumIntegerSpecifierContext(Enum_integer_type_specifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumIntegerSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumIntegerSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public Enum_integer_type_specifierContext enum_integer_type_specifier() {
		Enum_integer_type_specifierContext _localctx = new Enum_integer_type_specifierContext(Context, State);
		EnterRule(_localctx, 102, RULE_enum_integer_type_specifier);
		try {
			State = 587;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				_localctx = new EnumIntegerSpecifierFromTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 578;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				_localctx = new EnumIntegerSpecifierWithDefaultsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 579;
				Match(INTEGER);
				State = 580;
				Match(T__2);
				State = 581;
				Match(T__3);
				}
				break;
			case 3:
				_localctx = new EnumIntegerSpecifierContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 582;
				Match(INTEGER);
				State = 583;
				Match(T__2);
				State = 584;
				ctf_expression_list();
				State = 585;
				Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_or_variant_declarationContext : ParserRuleContext {
		public Struct_or_variant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_or_variant_declaration; } }
	 
		public Struct_or_variant_declarationContext() { }
		public virtual void CopyFrom(Struct_or_variant_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructOrVariantTypedefContext : Struct_or_variant_declarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public Typedef_declarationContext typedef_declaration() {
			return GetRuleContext<Typedef_declarationContext>(0);
		}
		public StructOrVariantTypedefContext(Struct_or_variant_declarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStructOrVariantTypedef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStructOrVariantTypedef(this);
		}
	}
	public partial class StructOrVariantDeclarationContext : Struct_or_variant_declarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_specifiersContext declaration_specifiers() {
			return GetRuleContext<Declaration_specifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_or_variant_declarator_listContext struct_or_variant_declarator_list() {
			return GetRuleContext<Struct_or_variant_declarator_listContext>(0);
		}
		public StructOrVariantDeclarationContext(Struct_or_variant_declarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStructOrVariantDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStructOrVariantDeclaration(this);
		}
	}
	public partial class StructOrVariantTypealiasContext : Struct_or_variant_declarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public Typealias_declarationContext typealias_declaration() {
			return GetRuleContext<Typealias_declarationContext>(0);
		}
		public StructOrVariantTypealiasContext(Struct_or_variant_declarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStructOrVariantTypealias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStructOrVariantTypealias(this);
		}
	}

	[RuleVersion(0)]
	public Struct_or_variant_declarationContext struct_or_variant_declaration() {
		Struct_or_variant_declarationContext _localctx = new Struct_or_variant_declarationContext(Context, State);
		EnterRule(_localctx, 104, RULE_struct_or_variant_declaration);
		try {
			State = 599;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENUM:
			case FLOATING_POINT:
			case INTEGER:
			case STRING:
			case STRUCT:
			case VARIANT:
			case IDENTIFIER:
				_localctx = new StructOrVariantDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 589;
				declaration_specifiers();
				State = 590;
				struct_or_variant_declarator_list();
				State = 591;
				Match(T__0);
				}
				break;
			case TYPEDEF:
				_localctx = new StructOrVariantTypedefContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 593;
				typedef_declaration();
				State = 594;
				Match(T__0);
				}
				break;
			case TYPEALIAS:
				_localctx = new StructOrVariantTypealiasContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 596;
				typealias_declaration();
				State = 597;
				Match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
	 
		public IntegerLiteralContext() { }
		public virtual void CopyFrom(IntegerLiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OctalLiteralContext : IntegerLiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTAL_LITERAL() { return GetToken(CtfParser.OCTAL_LITERAL, 0); }
		public OctalLiteralContext(IntegerLiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterOctalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitOctalLiteral(this);
		}
	}
	public partial class DecimalLiteralContext : IntegerLiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LITERAL() { return GetToken(CtfParser.DECIMAL_LITERAL, 0); }
		public DecimalLiteralContext(IntegerLiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
	}
	public partial class HexadecimalLiteralContext : IntegerLiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEXADECIMAL_LITERAL() { return GetToken(CtfParser.HEXADECIMAL_LITERAL, 0); }
		public HexadecimalLiteralContext(IntegerLiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterHexadecimalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitHexadecimalLiteral(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 106, RULE_integerLiteral);
		try {
			State = 604;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_LITERAL:
				_localctx = new DecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 601;
				Match(DECIMAL_LITERAL);
				}
				break;
			case HEXADECIMAL_LITERAL:
				_localctx = new HexadecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 602;
				Match(HEXADECIMAL_LITERAL);
				}
				break;
			case OCTAL_LITERAL:
				_localctx = new OctalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 603;
				Match(OCTAL_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_expressionContext : ParserRuleContext {
		public Postfix_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_expression; } }
	 
		public Postfix_expressionContext() { }
		public virtual void CopyFrom(Postfix_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PostfixExpressionComplexContext : Postfix_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_expression_complexContext postfix_expression_complex() {
			return GetRuleContext<Postfix_expression_complexContext>(0);
		}
		public PostfixExpressionComplexContext(Postfix_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterPostfixExpressionComplex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitPostfixExpressionComplex(this);
		}
	}
	public partial class PostfixExpressionStringLiteralContext : Postfix_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CtfParser.STRING_LITERAL, 0); }
		public PostfixExpressionStringLiteralContext(Postfix_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterPostfixExpressionStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitPostfixExpressionStringLiteral(this);
		}
	}
	public partial class PostfixExpressionIntegerLiteralContext : Postfix_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public PostfixExpressionIntegerLiteralContext(Postfix_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterPostfixExpressionIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitPostfixExpressionIntegerLiteral(this);
		}
	}
	public partial class PostfixExpressionCharacterLiteralContext : Postfix_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(CtfParser.CHARACTER_LITERAL, 0); }
		public PostfixExpressionCharacterLiteralContext(Postfix_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterPostfixExpressionCharacterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitPostfixExpressionCharacterLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_expressionContext postfix_expression() {
		Postfix_expressionContext _localctx = new Postfix_expressionContext(Context, State);
		EnterRule(_localctx, 108, RULE_postfix_expression);
		try {
			State = 610;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_LITERAL:
			case OCTAL_LITERAL:
			case HEXADECIMAL_LITERAL:
				_localctx = new PostfixExpressionIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 606;
				integerLiteral();
				}
				break;
			case STRING_LITERAL:
				_localctx = new PostfixExpressionStringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 607;
				Match(STRING_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				_localctx = new PostfixExpressionCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 608;
				Match(CHARACTER_LITERAL);
				}
				break;
			case T__9:
			case CLOCK:
			case ENV:
			case EVENT:
			case STREAM:
			case TRACE:
			case IDENTIFIER:
				_localctx = new PostfixExpressionComplexContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 609;
				postfix_expression_complex(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_expression_complexContext : ParserRuleContext {
		public Postfix_expression_complexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_expression_complex; } }
	 
		public Postfix_expression_complexContext() { }
		public virtual void CopyFrom(Postfix_expression_complexContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PostfixExpressionDynamicReferenceContext : Postfix_expression_complexContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dynamic_referenceContext dynamic_reference() {
			return GetRuleContext<Dynamic_referenceContext>(0);
		}
		public PostfixExpressionDynamicReferenceContext(Postfix_expression_complexContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterPostfixExpressionDynamicReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitPostfixExpressionDynamicReference(this);
		}
	}
	public partial class PostfixExpressionPostfixWithBracketsContext : Postfix_expression_complexContext {
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_expression_complexContext postfix_expression_complex() {
			return GetRuleContext<Postfix_expression_complexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public PostfixExpressionPostfixWithBracketsContext(Postfix_expression_complexContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterPostfixExpressionPostfixWithBrackets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitPostfixExpressionPostfixWithBrackets(this);
		}
	}
	public partial class PostfixExpressionIdentifierContext : Postfix_expression_complexContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		public PostfixExpressionIdentifierContext(Postfix_expression_complexContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterPostfixExpressionIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitPostfixExpressionIdentifier(this);
		}
	}
	public partial class PostfixExpressionParentheseUnaryExpressionContext : Postfix_expression_complexContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public PostfixExpressionParentheseUnaryExpressionContext(Postfix_expression_complexContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterPostfixExpressionParentheseUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitPostfixExpressionParentheseUnaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_expression_complexContext postfix_expression_complex() {
		return postfix_expression_complex(0);
	}

	private Postfix_expression_complexContext postfix_expression_complex(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Postfix_expression_complexContext _localctx = new Postfix_expression_complexContext(Context, _parentState);
		Postfix_expression_complexContext _prevctx = _localctx;
		int _startState = 110;
		EnterRecursionRule(_localctx, 110, RULE_postfix_expression_complex, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				_localctx = new PostfixExpressionIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 613;
				Match(IDENTIFIER);
				}
				break;
			case CLOCK:
			case ENV:
			case EVENT:
			case STREAM:
			case TRACE:
				{
				_localctx = new PostfixExpressionDynamicReferenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 614;
				dynamic_reference();
				}
				break;
			case T__9:
				{
				_localctx = new PostfixExpressionParentheseUnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 615;
				Match(T__9);
				State = 616;
				unary_expression();
				State = 617;
				Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 628;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PostfixExpressionPostfixWithBracketsContext(new Postfix_expression_complexContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression_complex);
					State = 621;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 622;
					Match(T__11);
					State = 623;
					unary_expression();
					State = 624;
					Match(T__12);
					}
					} 
				}
				State = 630;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Dynamic_referenceContext : ParserRuleContext {
		public Dynamic_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamic_reference; } }
	 
		public Dynamic_referenceContext() { }
		public virtual void CopyFrom(Dynamic_referenceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StreamDynamicReferenceContext : Dynamic_referenceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM() { return GetToken(CtfParser.STREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(CtfParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CtfParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CtfParser.IDENTIFIER, i);
		}
		public StreamDynamicReferenceContext(Dynamic_referenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStreamDynamicReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStreamDynamicReference(this);
		}
	}
	public partial class EventDynamicReferenceContext : Dynamic_referenceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(CtfParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CtfParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CtfParser.IDENTIFIER, i);
		}
		public EventDynamicReferenceContext(Dynamic_referenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEventDynamicReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEventDynamicReference(this);
		}
	}
	public partial class TraceDynamicReferenceContext : Dynamic_referenceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRACE() { return GetToken(CtfParser.TRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CtfParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CtfParser.IDENTIFIER, i);
		}
		public TraceDynamicReferenceContext(Dynamic_referenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTraceDynamicReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTraceDynamicReference(this);
		}
	}
	public partial class EnvDynamicReferenceContext : Dynamic_referenceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENV() { return GetToken(CtfParser.ENV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CtfParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CtfParser.IDENTIFIER, i);
		}
		public EnvDynamicReferenceContext(Dynamic_referenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnvDynamicReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnvDynamicReference(this);
		}
	}
	public partial class ClockDynamicReferenceContext : Dynamic_referenceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOCK() { return GetToken(CtfParser.CLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CtfParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CtfParser.IDENTIFIER, i);
		}
		public ClockDynamicReferenceContext(Dynamic_referenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterClockDynamicReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitClockDynamicReference(this);
		}
	}

	[RuleVersion(0)]
	public Dynamic_referenceContext dynamic_reference() {
		Dynamic_referenceContext _localctx = new Dynamic_referenceContext(Context, State);
		EnterRule(_localctx, 112, RULE_dynamic_reference);
		try {
			int _alt;
			State = 683;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EVENT:
				_localctx = new EventDynamicReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 631;
				Match(EVENT);
				State = 632;
				Match(T__5);
				State = 633;
				Match(IDENTIFIER);
				State = 638;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 634;
						Match(T__5);
						State = 635;
						Match(IDENTIFIER);
						}
						} 
					}
					State = 640;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
				}
				}
				break;
			case TRACE:
				_localctx = new TraceDynamicReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 641;
				Match(TRACE);
				State = 642;
				Match(T__5);
				State = 643;
				Match(IDENTIFIER);
				State = 648;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 644;
						Match(T__5);
						State = 645;
						Match(IDENTIFIER);
						}
						} 
					}
					State = 650;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
				}
				}
				break;
			case STREAM:
				_localctx = new StreamDynamicReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 651;
				Match(STREAM);
				State = 652;
				Match(T__5);
				State = 653;
				Match(EVENT);
				State = 654;
				Match(T__5);
				State = 655;
				Match(IDENTIFIER);
				State = 660;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 656;
						Match(T__5);
						State = 657;
						Match(IDENTIFIER);
						}
						} 
					}
					State = 662;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
				}
				}
				break;
			case ENV:
				_localctx = new EnvDynamicReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 663;
				Match(ENV);
				State = 664;
				Match(T__5);
				State = 665;
				Match(IDENTIFIER);
				State = 670;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 666;
						Match(T__5);
						State = 667;
						Match(IDENTIFIER);
						}
						} 
					}
					State = 672;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
				}
				}
				break;
			case CLOCK:
				_localctx = new ClockDynamicReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 673;
				Match(CLOCK);
				State = 674;
				Match(T__5);
				State = 675;
				Match(IDENTIFIER);
				State = 680;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 676;
						Match(T__5);
						State = 677;
						Match(IDENTIFIER);
						}
						} 
					}
					State = 682;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enumerator_mappingContext : ParserRuleContext {
		public Enumerator_mappingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator_mapping; } }
	 
		public Enumerator_mappingContext() { }
		public virtual void CopyFrom(Enumerator_mappingContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EnumeratorMappingSimpleContext : Enumerator_mappingContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public EnumeratorMappingSimpleContext(Enumerator_mappingContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumeratorMappingSimple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumeratorMappingSimple(this);
		}
	}
	public partial class EnumeratorMappingRangeContext : Enumerator_mappingContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		public EnumeratorMappingRangeContext(Enumerator_mappingContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumeratorMappingRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumeratorMappingRange(this);
		}
	}

	[RuleVersion(0)]
	public Enumerator_mappingContext enumerator_mapping() {
		Enumerator_mappingContext _localctx = new Enumerator_mappingContext(Context, State);
		EnterRule(_localctx, 114, RULE_enumerator_mapping);
		try {
			State = 690;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				_localctx = new EnumeratorMappingRangeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 685;
				unary_expression();
				State = 686;
				Match(T__16);
				State = 687;
				unary_expression();
				}
				break;
			case 2:
				_localctx = new EnumeratorMappingSimpleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 689;
				unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_or_variant_declarator_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_or_variant_declaratorContext[] struct_or_variant_declarator() {
			return GetRuleContexts<Struct_or_variant_declaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_or_variant_declaratorContext struct_or_variant_declarator(int i) {
			return GetRuleContext<Struct_or_variant_declaratorContext>(i);
		}
		public Struct_or_variant_declarator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_or_variant_declarator_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStruct_or_variant_declarator_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStruct_or_variant_declarator_list(this);
		}
	}

	[RuleVersion(0)]
	public Struct_or_variant_declarator_listContext struct_or_variant_declarator_list() {
		Struct_or_variant_declarator_listContext _localctx = new Struct_or_variant_declarator_listContext(Context, State);
		EnterRule(_localctx, 116, RULE_struct_or_variant_declarator_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 692;
			struct_or_variant_declarator();
			State = 697;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 693;
				Match(T__4);
				State = 694;
				struct_or_variant_declarator();
				}
				}
				State = 699;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_or_variant_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Struct_or_variant_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_or_variant_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStruct_or_variant_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStruct_or_variant_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Struct_or_variant_declaratorContext struct_or_variant_declarator() {
		Struct_or_variant_declaratorContext _localctx = new Struct_or_variant_declaratorContext(Context, State);
		EnterRule(_localctx, 118, RULE_struct_or_variant_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 700;
			declarator();
			State = 703;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 701;
				Match(T__6);
				State = 702;
				unary_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(Context, State);
		EnterRule(_localctx, 120, RULE_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 705;
			Match(IDENTIFIER);
			State = 710;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 706;
				Match(T__11);
				State = 707;
				unary_expression();
				State = 708;
				Match(T__12);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 43: return enum_integer_declaration_specifiers_sempred((Enum_integer_declaration_specifiersContext)_localctx, predIndex);
		case 55: return postfix_expression_complex_sempred((Postfix_expression_complexContext)_localctx, predIndex);
		}
		return true;
	}
	private bool enum_integer_declaration_specifiers_sempred(Enum_integer_declaration_specifiersContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool postfix_expression_complex_sempred(Postfix_expression_complexContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,42,713,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,1,0,4,0,124,8,0,11,0,12,0,125,
		1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,
		2,145,8,2,1,3,1,3,3,3,149,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
		1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,4,7,
		195,8,7,11,7,12,7,196,3,7,199,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,208,
		8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,217,8,9,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,3,10,226,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,235,8,11,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,246,8,12,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,257,8,13,1,14,1,14,1,14,5,14,262,
		8,14,10,14,12,14,265,9,14,1,15,1,15,1,15,5,15,270,8,15,10,15,12,15,273,
		9,15,1,16,1,16,1,17,1,17,1,17,5,17,280,8,17,10,17,12,17,283,9,17,1,18,
		1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,4,19,294,8,19,11,19,12,19,295,
		1,20,1,20,4,20,300,8,20,11,20,12,20,301,1,21,1,21,1,21,3,21,307,8,21,1,
		21,1,21,1,22,4,22,312,8,22,11,22,12,22,313,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,3,23,364,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,1,24,3,24,394,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
		25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
		25,1,25,1,25,1,25,1,25,3,25,423,8,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,
		1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,
		1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,38,
		1,38,1,38,1,38,1,38,3,38,464,8,38,1,38,1,38,1,38,1,38,5,38,470,8,38,10,
		38,12,38,473,9,38,1,39,1,39,1,39,1,39,1,39,3,39,480,8,39,1,39,1,39,3,39,
		484,8,39,1,39,5,39,487,8,39,10,39,12,39,490,9,39,1,40,1,40,1,40,1,40,3,
		40,496,8,40,1,40,1,40,3,40,500,8,40,1,40,5,40,503,8,40,10,40,12,40,506,
		9,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
		1,41,1,41,3,41,523,8,41,1,42,1,42,1,42,5,42,528,8,42,10,42,12,42,531,9,
		42,1,43,1,43,1,43,1,43,1,43,5,43,538,8,43,10,43,12,43,541,9,43,1,44,1,
		44,1,45,1,45,1,46,5,46,548,8,46,10,46,12,46,551,9,46,1,47,1,47,1,48,1,
		48,1,49,1,49,1,49,1,49,1,49,3,49,562,8,49,1,50,1,50,1,50,1,50,1,50,1,50,
		1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,577,8,50,1,51,1,51,1,51,1,51,1,
		51,1,51,1,51,1,51,1,51,3,51,588,8,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,3,52,600,8,52,1,53,1,53,1,53,3,53,605,8,53,1,54,1,54,1,
		54,1,54,3,54,611,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,620,8,55,
		1,55,1,55,1,55,1,55,1,55,5,55,627,8,55,10,55,12,55,630,9,55,1,56,1,56,
		1,56,1,56,1,56,5,56,637,8,56,10,56,12,56,640,9,56,1,56,1,56,1,56,1,56,
		1,56,5,56,647,8,56,10,56,12,56,650,9,56,1,56,1,56,1,56,1,56,1,56,1,56,
		1,56,5,56,659,8,56,10,56,12,56,662,9,56,1,56,1,56,1,56,1,56,1,56,5,56,
		669,8,56,10,56,12,56,672,9,56,1,56,1,56,1,56,1,56,1,56,5,56,679,8,56,10,
		56,12,56,682,9,56,3,56,684,8,56,1,57,1,57,1,57,1,57,1,57,3,57,691,8,57,
		1,58,1,58,1,58,5,58,696,8,58,10,58,12,58,699,9,58,1,59,1,59,1,59,3,59,
		704,8,59,1,60,1,60,1,60,1,60,1,60,3,60,711,8,60,1,60,0,2,86,110,61,0,2,
		4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,108,110,112,114,116,118,120,0,1,2,0,18,29,31,32,751,0,123,
		1,0,0,0,2,127,1,0,0,0,4,144,1,0,0,0,6,148,1,0,0,0,8,150,1,0,0,0,10,156,
		1,0,0,0,12,160,1,0,0,0,14,198,1,0,0,0,16,207,1,0,0,0,18,216,1,0,0,0,20,
		225,1,0,0,0,22,234,1,0,0,0,24,245,1,0,0,0,26,256,1,0,0,0,28,258,1,0,0,
		0,30,266,1,0,0,0,32,274,1,0,0,0,34,276,1,0,0,0,36,284,1,0,0,0,38,293,1,
		0,0,0,40,299,1,0,0,0,42,306,1,0,0,0,44,311,1,0,0,0,46,363,1,0,0,0,48,393,
		1,0,0,0,50,422,1,0,0,0,52,424,1,0,0,0,54,427,1,0,0,0,56,430,1,0,0,0,58,
		433,1,0,0,0,60,436,1,0,0,0,62,439,1,0,0,0,64,442,1,0,0,0,66,445,1,0,0,
		0,68,448,1,0,0,0,70,450,1,0,0,0,72,453,1,0,0,0,74,455,1,0,0,0,76,463,1,
		0,0,0,78,479,1,0,0,0,80,495,1,0,0,0,82,522,1,0,0,0,84,524,1,0,0,0,86,532,
		1,0,0,0,88,542,1,0,0,0,90,544,1,0,0,0,92,549,1,0,0,0,94,552,1,0,0,0,96,
		554,1,0,0,0,98,561,1,0,0,0,100,576,1,0,0,0,102,587,1,0,0,0,104,599,1,0,
		0,0,106,604,1,0,0,0,108,610,1,0,0,0,110,619,1,0,0,0,112,683,1,0,0,0,114,
		690,1,0,0,0,116,692,1,0,0,0,118,700,1,0,0,0,120,705,1,0,0,0,122,124,3,
		4,2,0,123,122,1,0,0,0,124,125,1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,
		126,1,1,0,0,0,127,128,7,0,0,0,128,3,1,0,0,0,129,130,3,12,6,0,130,131,5,
		1,0,0,131,145,1,0,0,0,132,145,3,16,8,0,133,145,3,18,9,0,134,145,3,20,10,
		0,135,145,3,22,11,0,136,145,3,24,12,0,137,145,3,26,13,0,138,139,3,10,5,
		0,139,140,5,1,0,0,140,145,1,0,0,0,141,142,3,8,4,0,142,143,5,1,0,0,143,
		145,1,0,0,0,144,129,1,0,0,0,144,132,1,0,0,0,144,133,1,0,0,0,144,134,1,
		0,0,0,144,135,1,0,0,0,144,136,1,0,0,0,144,137,1,0,0,0,144,138,1,0,0,0,
		144,141,1,0,0,0,145,5,1,0,0,0,146,149,3,32,16,0,147,149,3,34,17,0,148,
		146,1,0,0,0,148,147,1,0,0,0,149,7,1,0,0,0,150,151,5,30,0,0,151,152,3,12,
		6,0,152,153,3,30,15,0,153,154,5,2,0,0,154,155,3,6,3,0,155,9,1,0,0,0,156,
		157,5,31,0,0,157,158,3,12,6,0,158,159,3,28,14,0,159,11,1,0,0,0,160,161,
		3,14,7,0,161,13,1,0,0,0,162,163,5,24,0,0,163,164,5,3,0,0,164,199,5,4,0,
		0,165,166,5,24,0,0,166,167,5,3,0,0,167,168,3,44,22,0,168,169,5,4,0,0,169,
		199,1,0,0,0,170,171,5,25,0,0,171,172,5,3,0,0,172,199,5,4,0,0,173,174,5,
		25,0,0,174,175,5,3,0,0,175,176,3,44,22,0,176,177,5,4,0,0,177,199,1,0,0,
		0,178,199,5,27,0,0,179,180,5,27,0,0,180,181,5,3,0,0,181,199,5,4,0,0,182,
		183,5,27,0,0,183,184,5,3,0,0,184,185,3,44,22,0,185,186,5,4,0,0,186,199,
		1,0,0,0,187,188,5,21,0,0,188,199,3,46,23,0,189,190,5,32,0,0,190,199,3,
		48,24,0,191,192,5,28,0,0,192,199,3,50,25,0,193,195,5,36,0,0,194,193,1,
		0,0,0,195,196,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,199,1,0,0,0,
		198,162,1,0,0,0,198,165,1,0,0,0,198,170,1,0,0,0,198,173,1,0,0,0,198,178,
		1,0,0,0,198,179,1,0,0,0,198,182,1,0,0,0,198,187,1,0,0,0,198,189,1,0,0,
		0,198,191,1,0,0,0,198,194,1,0,0,0,199,15,1,0,0,0,200,201,3,52,26,0,201,
		202,3,54,27,0,202,208,1,0,0,0,203,204,3,52,26,0,204,205,3,44,22,0,205,
		206,3,54,27,0,206,208,1,0,0,0,207,200,1,0,0,0,207,203,1,0,0,0,208,17,1,
		0,0,0,209,210,3,56,28,0,210,211,3,58,29,0,211,217,1,0,0,0,212,213,3,56,
		28,0,213,214,3,40,20,0,214,215,3,58,29,0,215,217,1,0,0,0,216,209,1,0,0,
		0,216,212,1,0,0,0,217,19,1,0,0,0,218,219,3,60,30,0,219,220,3,62,31,0,220,
		226,1,0,0,0,221,222,3,60,30,0,222,223,3,44,22,0,223,224,3,62,31,0,224,
		226,1,0,0,0,225,218,1,0,0,0,225,221,1,0,0,0,226,21,1,0,0,0,227,228,3,64,
		32,0,228,229,3,66,33,0,229,235,1,0,0,0,230,231,3,64,32,0,231,232,3,38,
		19,0,232,233,3,66,33,0,233,235,1,0,0,0,234,227,1,0,0,0,234,230,1,0,0,0,
		235,23,1,0,0,0,236,237,5,20,0,0,237,238,3,68,34,0,238,239,3,70,35,0,239,
		246,1,0,0,0,240,241,5,20,0,0,241,242,3,68,34,0,242,243,3,44,22,0,243,244,
		3,70,35,0,244,246,1,0,0,0,245,236,1,0,0,0,245,240,1,0,0,0,246,25,1,0,0,
		0,247,248,5,19,0,0,248,249,3,72,36,0,249,250,3,74,37,0,250,257,1,0,0,0,
		251,252,5,19,0,0,252,253,3,72,36,0,253,254,3,44,22,0,254,255,3,74,37,0,
		255,257,1,0,0,0,256,247,1,0,0,0,256,251,1,0,0,0,257,27,1,0,0,0,258,263,
		3,76,38,0,259,260,5,5,0,0,260,262,3,76,38,0,261,259,1,0,0,0,262,265,1,
		0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,29,1,0,0,0,265,263,1,0,0,0,266,
		271,3,78,39,0,267,268,5,5,0,0,268,270,3,78,39,0,269,267,1,0,0,0,270,273,
		1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,0,272,31,1,0,0,0,273,271,1,0,0,0,
		274,275,3,14,7,0,275,33,1,0,0,0,276,281,3,80,40,0,277,278,5,5,0,0,278,
		280,3,80,40,0,279,277,1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,
		1,0,0,0,282,35,1,0,0,0,283,281,1,0,0,0,284,285,5,36,0,0,285,286,5,6,0,
		0,286,287,5,36,0,0,287,288,5,2,0,0,288,289,3,12,6,0,289,290,5,1,0,0,290,
		37,1,0,0,0,291,294,3,42,21,0,292,294,3,36,18,0,293,291,1,0,0,0,293,292,
		1,0,0,0,294,295,1,0,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,39,1,0,0,0,
		297,300,3,42,21,0,298,300,3,36,18,0,299,297,1,0,0,0,299,298,1,0,0,0,300,
		301,1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,41,1,0,0,0,303,307,3,82,
		41,0,304,307,3,10,5,0,305,307,3,8,4,0,306,303,1,0,0,0,306,304,1,0,0,0,
		306,305,1,0,0,0,307,308,1,0,0,0,308,309,5,1,0,0,309,43,1,0,0,0,310,312,
		3,42,21,0,311,310,1,0,0,0,312,313,1,0,0,0,313,311,1,0,0,0,313,314,1,0,
		0,0,314,45,1,0,0,0,315,316,5,3,0,0,316,317,3,84,42,0,317,318,5,4,0,0,318,
		364,1,0,0,0,319,320,5,3,0,0,320,321,3,84,42,0,321,322,5,5,0,0,322,323,
		5,4,0,0,323,364,1,0,0,0,324,325,5,7,0,0,325,326,3,86,43,0,326,327,5,3,
		0,0,327,328,3,84,42,0,328,329,5,4,0,0,329,364,1,0,0,0,330,331,5,7,0,0,
		331,332,3,86,43,0,332,333,5,3,0,0,333,334,3,84,42,0,334,335,5,5,0,0,335,
		336,5,4,0,0,336,364,1,0,0,0,337,338,5,36,0,0,338,339,5,3,0,0,339,340,3,
		84,42,0,340,341,5,4,0,0,341,364,1,0,0,0,342,343,5,36,0,0,343,344,5,3,0,
		0,344,345,3,84,42,0,345,346,5,5,0,0,346,347,5,4,0,0,347,364,1,0,0,0,348,
		349,5,36,0,0,349,350,5,7,0,0,350,351,3,86,43,0,351,352,5,3,0,0,352,353,
		3,84,42,0,353,354,5,4,0,0,354,364,1,0,0,0,355,356,5,36,0,0,356,357,5,7,
		0,0,357,358,3,86,43,0,358,359,5,3,0,0,359,360,3,84,42,0,360,361,5,5,0,
		0,361,362,5,4,0,0,362,364,1,0,0,0,363,315,1,0,0,0,363,319,1,0,0,0,363,
		324,1,0,0,0,363,330,1,0,0,0,363,337,1,0,0,0,363,342,1,0,0,0,363,348,1,
		0,0,0,363,355,1,0,0,0,364,47,1,0,0,0,365,366,3,88,44,0,366,367,3,92,46,
		0,367,368,3,90,45,0,368,394,1,0,0,0,369,370,5,8,0,0,370,371,5,36,0,0,371,
		372,5,9,0,0,372,373,3,88,44,0,373,374,3,92,46,0,374,375,3,90,45,0,375,
		394,1,0,0,0,376,377,5,36,0,0,377,378,3,88,44,0,378,379,3,92,46,0,379,380,
		3,90,45,0,380,394,1,0,0,0,381,382,5,36,0,0,382,383,5,8,0,0,383,384,5,36,
		0,0,384,385,5,9,0,0,385,386,3,88,44,0,386,387,3,92,46,0,387,388,3,90,45,
		0,388,394,1,0,0,0,389,390,5,36,0,0,390,391,5,8,0,0,391,392,5,36,0,0,392,
		394,5,9,0,0,393,365,1,0,0,0,393,369,1,0,0,0,393,376,1,0,0,0,393,381,1,
		0,0,0,393,389,1,0,0,0,394,49,1,0,0,0,395,396,3,94,47,0,396,397,3,92,46,
		0,397,398,3,96,48,0,398,423,1,0,0,0,399,400,5,36,0,0,400,401,3,94,47,0,
		401,402,3,92,46,0,402,403,3,96,48,0,403,423,1,0,0,0,404,423,5,36,0,0,405,
		406,3,94,47,0,406,407,3,92,46,0,407,408,3,96,48,0,408,409,5,18,0,0,409,
		410,5,10,0,0,410,411,3,98,49,0,411,412,5,11,0,0,412,423,1,0,0,0,413,414,
		5,36,0,0,414,415,3,94,47,0,415,416,3,92,46,0,416,417,3,96,48,0,417,418,
		5,18,0,0,418,419,5,10,0,0,419,420,3,98,49,0,420,421,5,11,0,0,421,423,1,
		0,0,0,422,395,1,0,0,0,422,399,1,0,0,0,422,404,1,0,0,0,422,405,1,0,0,0,
		422,413,1,0,0,0,423,51,1,0,0,0,424,425,5,23,0,0,425,426,5,3,0,0,426,53,
		1,0,0,0,427,428,5,4,0,0,428,429,5,1,0,0,429,55,1,0,0,0,430,431,5,26,0,
		0,431,432,5,3,0,0,432,57,1,0,0,0,433,434,5,4,0,0,434,435,5,1,0,0,435,59,
		1,0,0,0,436,437,5,22,0,0,437,438,5,3,0,0,438,61,1,0,0,0,439,440,5,4,0,
		0,440,441,5,1,0,0,441,63,1,0,0,0,442,443,5,29,0,0,443,444,5,3,0,0,444,
		65,1,0,0,0,445,446,5,4,0,0,446,447,5,1,0,0,447,67,1,0,0,0,448,449,5,3,
		0,0,449,69,1,0,0,0,450,451,5,4,0,0,451,452,5,1,0,0,452,71,1,0,0,0,453,
		454,5,3,0,0,454,73,1,0,0,0,455,456,5,4,0,0,456,457,5,1,0,0,457,75,1,0,
		0,0,458,464,5,36,0,0,459,460,5,10,0,0,460,461,3,76,38,0,461,462,5,11,0,
		0,462,464,1,0,0,0,463,458,1,0,0,0,463,459,1,0,0,0,463,464,1,0,0,0,464,
		471,1,0,0,0,465,466,5,12,0,0,466,467,3,98,49,0,467,468,5,13,0,0,468,470,
		1,0,0,0,469,465,1,0,0,0,470,473,1,0,0,0,471,469,1,0,0,0,471,472,1,0,0,
		0,472,77,1,0,0,0,473,471,1,0,0,0,474,480,5,36,0,0,475,476,5,10,0,0,476,
		477,3,78,39,0,477,478,5,11,0,0,478,480,1,0,0,0,479,474,1,0,0,0,479,475,
		1,0,0,0,479,480,1,0,0,0,480,488,1,0,0,0,481,483,5,12,0,0,482,484,3,98,
		49,0,483,482,1,0,0,0,483,484,1,0,0,0,484,485,1,0,0,0,485,487,5,13,0,0,
		486,481,1,0,0,0,487,490,1,0,0,0,488,486,1,0,0,0,488,489,1,0,0,0,489,79,
		1,0,0,0,490,488,1,0,0,0,491,492,5,10,0,0,492,493,3,80,40,0,493,494,5,11,
		0,0,494,496,1,0,0,0,495,491,1,0,0,0,495,496,1,0,0,0,496,504,1,0,0,0,497,
		499,5,12,0,0,498,500,3,98,49,0,499,498,1,0,0,0,499,500,1,0,0,0,500,501,
		1,0,0,0,501,503,5,13,0,0,502,497,1,0,0,0,503,506,1,0,0,0,504,502,1,0,0,
		0,504,505,1,0,0,0,505,81,1,0,0,0,506,504,1,0,0,0,507,508,5,36,0,0,508,
		509,5,14,0,0,509,523,3,98,49,0,510,511,3,112,56,0,511,512,5,14,0,0,512,
		513,3,98,49,0,513,523,1,0,0,0,514,515,3,2,1,0,515,516,5,14,0,0,516,517,
		3,98,49,0,517,523,1,0,0,0,518,519,3,98,49,0,519,520,5,2,0,0,520,521,3,
		12,6,0,521,523,1,0,0,0,522,507,1,0,0,0,522,510,1,0,0,0,522,514,1,0,0,0,
		522,518,1,0,0,0,523,83,1,0,0,0,524,529,3,100,50,0,525,526,5,5,0,0,526,
		528,3,100,50,0,527,525,1,0,0,0,528,531,1,0,0,0,529,527,1,0,0,0,529,530,
		1,0,0,0,530,85,1,0,0,0,531,529,1,0,0,0,532,533,6,43,-1,0,533,534,3,102,
		51,0,534,539,1,0,0,0,535,536,10,1,0,0,536,538,3,102,51,0,537,535,1,0,0,
		0,538,541,1,0,0,0,539,537,1,0,0,0,539,540,1,0,0,0,540,87,1,0,0,0,541,539,
		1,0,0,0,542,543,5,3,0,0,543,89,1,0,0,0,544,545,5,4,0,0,545,91,1,0,0,0,
		546,548,3,104,52,0,547,546,1,0,0,0,548,551,1,0,0,0,549,547,1,0,0,0,549,
		550,1,0,0,0,550,93,1,0,0,0,551,549,1,0,0,0,552,553,5,3,0,0,553,95,1,0,
		0,0,554,555,5,4,0,0,555,97,1,0,0,0,556,562,3,108,54,0,557,558,5,15,0,0,
		558,562,3,98,49,0,559,560,5,16,0,0,560,562,3,98,49,0,561,556,1,0,0,0,561,
		557,1,0,0,0,561,559,1,0,0,0,562,99,1,0,0,0,563,577,5,36,0,0,564,577,3,
		2,1,0,565,577,5,40,0,0,566,567,5,36,0,0,567,568,5,14,0,0,568,577,3,114,
		57,0,569,570,3,2,1,0,570,571,5,14,0,0,571,572,3,114,57,0,572,577,1,0,0,
		0,573,574,5,40,0,0,574,575,5,14,0,0,575,577,3,114,57,0,576,563,1,0,0,0,
		576,564,1,0,0,0,576,565,1,0,0,0,576,566,1,0,0,0,576,569,1,0,0,0,576,573,
		1,0,0,0,577,101,1,0,0,0,578,588,5,36,0,0,579,580,5,25,0,0,580,581,5,3,
		0,0,581,588,5,4,0,0,582,583,5,25,0,0,583,584,5,3,0,0,584,585,3,44,22,0,
		585,586,5,4,0,0,586,588,1,0,0,0,587,578,1,0,0,0,587,579,1,0,0,0,587,582,
		1,0,0,0,588,103,1,0,0,0,589,590,3,12,6,0,590,591,3,116,58,0,591,592,5,
		1,0,0,592,600,1,0,0,0,593,594,3,10,5,0,594,595,5,1,0,0,595,600,1,0,0,0,
		596,597,3,8,4,0,597,598,5,1,0,0,598,600,1,0,0,0,599,589,1,0,0,0,599,593,
		1,0,0,0,599,596,1,0,0,0,600,105,1,0,0,0,601,605,5,33,0,0,602,605,5,35,
		0,0,603,605,5,34,0,0,604,601,1,0,0,0,604,602,1,0,0,0,604,603,1,0,0,0,605,
		107,1,0,0,0,606,611,3,106,53,0,607,611,5,40,0,0,608,611,5,41,0,0,609,611,
		3,110,55,0,610,606,1,0,0,0,610,607,1,0,0,0,610,608,1,0,0,0,610,609,1,0,
		0,0,611,109,1,0,0,0,612,613,6,55,-1,0,613,620,5,36,0,0,614,620,3,112,56,
		0,615,616,5,10,0,0,616,617,3,98,49,0,617,618,5,11,0,0,618,620,1,0,0,0,
		619,612,1,0,0,0,619,614,1,0,0,0,619,615,1,0,0,0,620,628,1,0,0,0,621,622,
		10,1,0,0,622,623,5,12,0,0,623,624,3,98,49,0,624,625,5,13,0,0,625,627,1,
		0,0,0,626,621,1,0,0,0,627,630,1,0,0,0,628,626,1,0,0,0,628,629,1,0,0,0,
		629,111,1,0,0,0,630,628,1,0,0,0,631,632,5,23,0,0,632,633,5,6,0,0,633,638,
		5,36,0,0,634,635,5,6,0,0,635,637,5,36,0,0,636,634,1,0,0,0,637,640,1,0,
		0,0,638,636,1,0,0,0,638,639,1,0,0,0,639,684,1,0,0,0,640,638,1,0,0,0,641,
		642,5,29,0,0,642,643,5,6,0,0,643,648,5,36,0,0,644,645,5,6,0,0,645,647,
		5,36,0,0,646,644,1,0,0,0,647,650,1,0,0,0,648,646,1,0,0,0,648,649,1,0,0,
		0,649,684,1,0,0,0,650,648,1,0,0,0,651,652,5,26,0,0,652,653,5,6,0,0,653,
		654,5,23,0,0,654,655,5,6,0,0,655,660,5,36,0,0,656,657,5,6,0,0,657,659,
		5,36,0,0,658,656,1,0,0,0,659,662,1,0,0,0,660,658,1,0,0,0,660,661,1,0,0,
		0,661,684,1,0,0,0,662,660,1,0,0,0,663,664,5,22,0,0,664,665,5,6,0,0,665,
		670,5,36,0,0,666,667,5,6,0,0,667,669,5,36,0,0,668,666,1,0,0,0,669,672,
		1,0,0,0,670,668,1,0,0,0,670,671,1,0,0,0,671,684,1,0,0,0,672,670,1,0,0,
		0,673,674,5,20,0,0,674,675,5,6,0,0,675,680,5,36,0,0,676,677,5,6,0,0,677,
		679,5,36,0,0,678,676,1,0,0,0,679,682,1,0,0,0,680,678,1,0,0,0,680,681,1,
		0,0,0,681,684,1,0,0,0,682,680,1,0,0,0,683,631,1,0,0,0,683,641,1,0,0,0,
		683,651,1,0,0,0,683,663,1,0,0,0,683,673,1,0,0,0,684,113,1,0,0,0,685,686,
		3,98,49,0,686,687,5,17,0,0,687,688,3,98,49,0,688,691,1,0,0,0,689,691,3,
		98,49,0,690,685,1,0,0,0,690,689,1,0,0,0,691,115,1,0,0,0,692,697,3,118,
		59,0,693,694,5,5,0,0,694,696,3,118,59,0,695,693,1,0,0,0,696,699,1,0,0,
		0,697,695,1,0,0,0,697,698,1,0,0,0,698,117,1,0,0,0,699,697,1,0,0,0,700,
		703,3,120,60,0,701,702,5,7,0,0,702,704,3,98,49,0,703,701,1,0,0,0,703,704,
		1,0,0,0,704,119,1,0,0,0,705,710,5,36,0,0,706,707,5,12,0,0,707,708,3,98,
		49,0,708,709,5,13,0,0,709,711,1,0,0,0,710,706,1,0,0,0,710,711,1,0,0,0,
		711,121,1,0,0,0,53,125,144,148,196,198,207,216,225,234,245,256,263,271,
		281,293,295,299,301,306,313,363,393,422,463,471,479,483,488,495,499,504,
		522,529,539,549,561,576,587,599,604,610,619,628,638,648,660,670,680,683,
		690,697,703,710
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
